[{"C:\\Users\\spark\\repos\\tiny-collector\\src\\index.js":"1","C:\\Users\\spark\\repos\\tiny-collector\\src\\App.js":"2","C:\\Users\\spark\\repos\\tiny-collector\\src\\reportWebVitals.js":"3","C:\\Users\\spark\\repos\\tiny-collector\\src\\components\\PlotGrid.js":"4"},{"size":542,"mtime":1607131471703,"results":"5","hashOfConfig":"6"},{"size":1594,"mtime":1607203760836,"results":"7","hashOfConfig":"6"},{"size":375,"mtime":1607122052900,"results":"8","hashOfConfig":"6"},{"size":2171,"mtime":1607206957766,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"t3xt70",{"filePath":"13","messages":"14","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"C:\\Users\\spark\\repos\\tiny-collector\\src\\index.js",[],["21","22"],"C:\\Users\\spark\\repos\\tiny-collector\\src\\App.js",["23","24","25","26"],"import logo from './logo.svg';\r\nimport './App.css';\r\nimport HexagonGrid from 'react-hexagon-grid';\r\nimport times from 'lodash/times';\r\nimport LocalFloristRounded from \"@material-ui/icons/LocalFloristRounded\";\r\nimport PlotRow from './components/PlotGrid';\r\nimport { useState } from 'react';\r\n\r\n// returns an integer between 0 and max\r\nfunction roll(max) {\r\n  return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n\r\n//returns a list of \"plot\" objects: {id, isFlower, name}\r\nconst generatePlots = (size) => {\r\n  let plots = [];\r\n  times(size, id => {\r\n      let dice = roll(100); // roll a 100 sided die\r\n      if (dice<=10){ // around a 10 percent chance of rolling a flower\r\n        plots[id] = { id: id, isFlower: true, content: \"flower\"};\r\n      } else {\r\n        plots[id] = {id: id, isFlower: false, content: \"grass\"};\r\n      }\r\n  });\r\n  return plots;\r\n}\r\n\r\nfunction App() {\r\n  const rowSize = 9;\r\n  const plots2D = [];\r\n  let hexagons = generatePlots(rowSize*(rowSize-1));\r\n  while(hexagons.length) plots2D.push(hexagons.splice(0, rowSize));\r\n\r\n  times(plots2D.length, index => {\r\n    times(plots2D[index].length, index2 => {\r\n      plots2D[index][index2].row = index;\r\n      plots2D[index][index2].column = index2;\r\n    });\r\n  });\r\n\r\n\r\n  return (\r\n    <>\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n      tiny collector\r\n      <div className=\"honeycomb\" style={{paddingTop: \"50px\"}}>\r\n        {plots2D.map((plots, i) => {\r\n          return <PlotRow plots={plots} />\r\n        })}\r\n      </div>\r\n      </header>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\spark\\repos\\tiny-collector\\src\\reportWebVitals.js",[],"C:\\Users\\spark\\repos\\tiny-collector\\src\\components\\PlotGrid.js",["27","28","29","30","31","32"],"import { makeStyles } from \"@material-ui/core/styles\";\r\nimport LocalFloristRounded from \"@material-ui/icons/LocalFloristRounded\";\r\nimport { useState } from \"react\";\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\n\r\nfunction Plot(props){\r\n  let plot = props.plot;\r\n  let plots = props.plots;\r\n  let setPlots = props.setPlots;\r\n  let classy = \"hexagon \"+plot.content;\r\n  let grassOptions = [\r\n    \"#42796c\",\r\n    \"#3a514c\",\r\n    \"#185653\"\r\n  ]\r\n\r\n  let flowerOptions = [\r\n    \"#9f1f2b\",\r\n    \"#e88f00\",\r\n    \"#e0c55f\",\r\n    \"#7ddf84\",\r\n    \"#00c0cd\",\r\n    \"#9e7af0\"\r\n  ]\r\n\r\nfunction getRandom(min, max) {\r\n  return Math.random() * (max - min) + min;\r\n}\r\n  let color = grassOptions[Math.floor(Math.random() * Math.floor(3))];\r\n  let filter = \"\";\r\n  let content = <></>\r\n  if (plot.isFlower){\r\n    color = flowerOptions[Math.floor(Math.random() * Math.floor(7))]\r\n    content = <LocalFloristRounded />;\r\n  }\r\n\r\n\r\n\r\n  let handleClick = (id) => {\r\n    let thePlot = plots.filter((plot) => {return plot.id === id})[0];\r\n    console.log(thePlot);\r\n  }\r\n\r\n\r\n  let tooltipContent = <p style={{fontSize: 14}}>{\"Your ass is \" + plot.content}</p>\r\nlet myStyle = { backgroundColor: color };\r\n  return (\r\n    <Tooltip title={tooltipContent} arrow>\r\n    <div className={classy} style={myStyle} onClick={()=>{\r\n      handleClick(plot.id);\r\n    }} >\r\n      <div className=\"hexagontent\">\r\n        {content}\r\n      </div>\r\n    </div>\r\n    </Tooltip>\r\n  )\r\n\r\n}\r\n\r\nfunction PlotRow(props){\r\n  const [plots, setPlots] = useState(props.plots);\r\n\r\n  return (\r\n    <div className=\"ibws-fix\">\r\n    {\r\n      plots.map((plot, i)=>{\r\n        return <Plot key={\"key\"+i} plot={plot} plots={plots} setPlots={setPlots} />\r\n      })\r\n    }\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction PlotGrid(rowSize, plots) {\r\n  // rowSize * rowSize should equal hexagons.length\r\n  // break hexagons into 2D grid\r\n  const plots2D = [];\r\n  while(plots.length) plots2D.push(plots.splice(0, rowSize));\r\n  return (\r\n    <div className=\"honeycomb\">\r\n      {plots2D.map((plots, i) => {\r\n        <div className=\"ibws-fix\">\r\n          <PlotRow plots={plots} />\r\n        </div>\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PlotRow;\r\n",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":1,"column":8,"nodeType":"39","messageId":"40","endLine":1,"endColumn":12},{"ruleId":"37","severity":1,"message":"41","line":3,"column":8,"nodeType":"39","messageId":"40","endLine":3,"endColumn":19},{"ruleId":"37","severity":1,"message":"42","line":5,"column":8,"nodeType":"39","messageId":"40","endLine":5,"endColumn":27},{"ruleId":"37","severity":1,"message":"43","line":7,"column":10,"nodeType":"39","messageId":"40","endLine":7,"endColumn":18},{"ruleId":"37","severity":1,"message":"44","line":1,"column":10,"nodeType":"39","messageId":"40","endLine":1,"endColumn":20},{"ruleId":"37","severity":1,"message":"45","line":10,"column":7,"nodeType":"39","messageId":"40","endLine":10,"endColumn":15},{"ruleId":"37","severity":1,"message":"46","line":27,"column":10,"nodeType":"39","messageId":"40","endLine":27,"endColumn":19},{"ruleId":"37","severity":1,"message":"47","line":31,"column":7,"nodeType":"39","messageId":"40","endLine":31,"endColumn":13},{"ruleId":"37","severity":1,"message":"48","line":76,"column":10,"nodeType":"39","messageId":"40","endLine":76,"endColumn":18},{"ruleId":"49","severity":1,"message":"50","line":83,"column":31,"nodeType":"51","messageId":"52","endLine":83,"endColumn":33},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'HexagonGrid' is defined but never used.","'LocalFloristRounded' is defined but never used.","'useState' is defined but never used.","'makeStyles' is defined but never used.","'setPlots' is assigned a value but never used.","'getRandom' is defined but never used.","'filter' is assigned a value but never used.","'PlotGrid' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]