{"version":3,"sources":["components/OptionsDialog.js","components/PlotGrid/Plot.js","components/PlotGrid/PlotRow.js","utils/dice.js","constants/colors.js","config/gameConfig.js","components/Inventory/index.js","App.js","index.js"],"names":["useStyles","makeStyles","red","backgroundColor","color","blue","OptionsDialog","props","onClose","title","selectedValue","open","handleClose","handleListItemClick","value","console","log","classes","Dialog","aria-labelledby","maxWidth","DialogTitle","id","List","ListItem","button","onClick","ListItemAvatar","Avatar","className","ListItemText","primary","DialogActions","Button","Plot","plot","handleClick","classy","content","isFlower","age","flowerColor","budColor","plotTitle","flowerColorName","tooltipContent","style","fontSize","row","col","plotStyle","useState","setOpen","setSelectedValue","Tooltip","arrow","PlotRow","plots","gridState","gridStateSetter","thePlot","filter","map","i","rollUpTo","max","Math","floor","random","grassColors","colorNames","gameConfig","Inventory","data","flowerHues","items","setItems","createMuiTheme","palette","main","theme","root","flexGrow","paper","height","width","StyledBadge","withStyles","badge","top","right","border","background","padding","Badge","Wrapper","children","condition","wrapper","Container","paddingTop","Grid","container","spacing","item","xs","justify","index","quantity","badgeContent","component","Paper","elevation","variant","App","rowSize","size","plots2D","times","ageRoll","length","flowerColorRoll","name","push","splice","r","c","generatePlots","plotGrid","setPlotGrid","trueTime","setTrueTime","colorName","inventory","setInventory","displayTime","findEmptyNeighbors","x","y","neighbors","findNeighbors","empties","step","marked","pick","plantFlower","timeOfDay","borderRadius","ThemeProvider","Fab","margin","plotRow","ReactDOM","render","document","getElementById"],"mappings":"yZAqBMA,EAAYC,YAAW,CAC3BC,IAAK,CACHC,gBAAiBD,IAAI,KACrBE,MAAOF,IAAI,MAEbG,KAAM,CACJF,gBAAiBE,IAAK,KACtBD,MAAOC,IAAK,QAmDDC,EA/CO,SAAAC,GAAU,IAExBC,EAAwCD,EAAxCC,QAASC,EAA+BF,EAA/BE,MAAOC,EAAwBH,EAAxBG,cAAeC,EAASJ,EAATI,KAG/BC,EAAc,WAClBJ,EAAQE,IAGJG,EAAsB,SAACC,GAC3BC,QAAQC,IAAIF,GACZN,EAAQM,IAGNG,EAAUjB,IAGd,OACE,eAACkB,EAAA,EAAD,CAAQV,QAASI,EAAaO,kBAAgB,sBAAsBR,KAAMA,EAAMS,UAAU,EAA1F,UACI,cAACC,EAAA,EAAD,CAAaC,GAAG,sBAAhB,SAAuCb,IACvC,eAACc,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAUC,QAAM,EAACC,QAAS,kBAAMb,EAAoB,WAApD,UACE,cAACc,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAQC,UAAWZ,EAAQZ,KAA3B,SACE,cAAC,IAAD,QAGJ,cAACyB,EAAA,EAAD,CAAcC,QAAQ,cAGxB,eAACP,EAAA,EAAD,CAAUC,QAAM,EAACC,QAAS,kBAAMb,EAAoB,WAApD,UACE,cAACc,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAQC,UAAWZ,EAAQf,IAA3B,SACE,cAAC,IAAD,QAGJ,cAAC4B,EAAA,EAAD,CAAcC,QAAQ,iBAG1B,cAACC,EAAA,EAAD,UACC,cAACC,EAAA,EAAD,CAAQP,QAASd,EAAaR,MAAM,UAApC,SACC,cAAC,IAAD,YCPK8B,EAtDF,SAAA3B,GACX,IAAI4B,EAAO5B,EAAM4B,KACbC,EAAc7B,EAAM6B,YACpBC,EAAS,WAAWF,EAAKG,QACzBA,EAAU,GACVlC,EAAQ,GAER+B,EAAKI,UAAYJ,EAAKK,KAAM,IAC9BpC,EAAQ+B,EAAKM,YACbH,EAAU,cAAC,IAAD,KAERH,EAAKI,UAAYJ,EAAKK,IAAM,IAC9BpC,EAAQ+B,EAAKO,SACbJ,EAAU,cAAC,IAAD,KAGPH,EAAKI,WACRnC,EAAQ+B,EAAK/B,OAGf,IAAIuC,EAAYR,EAAKI,SAAWJ,EAAKS,gBAAkB,UAAY,aAC/DC,EAAiB,qCAAE,4BAAIF,IAAc,oBAAGG,MAAO,CAACC,SAAU,IAArB,UAA2BZ,EAAKa,IAAhC,KAAuCb,EAAKc,UACjFC,EAAY,CAAE/C,gBAAiBC,GAtBf,EAyBI+C,oBAAS,GAzBb,mBAyBbxC,EAzBa,KAyBPyC,EAzBO,OA0BsBD,mBAAS,UA1B/B,mBA0BbzC,EA1Ba,KA0BE2C,EA1BF,KAkCpB,OACE,qCACA,cAACC,EAAA,EAAD,CAAS7C,MAAOoC,EAAgBU,OAAK,EAArC,SACA,qBAAK1B,UAAWQ,EAAQS,MAAOI,EAAWxB,QAAS,WACjDU,EAAYD,EAAKb,IACjB8B,GAAQ,IAFV,SAIE,qBAAKvB,UAAU,cAAf,SACGS,QAIHH,EAAKI,UAAYJ,EAAKK,KACtB,cAAC,EAAD,CAAehC,QAlBL,SAACM,GACfsC,GAAQ,GACRC,EAAiBvC,IAgBoBL,MAAOkC,EAAWhC,KAAMA,EAAMD,cAAeA,QCpCrE8C,EApBC,SAACjD,GACf,IAAMkD,EAAQlD,EAAMkD,MAIdrB,GAHY7B,EAAMmD,UACAnD,EAAMoD,gBAEV,SAACrC,GACnB,IAAIsC,EAAUH,EAAMI,QAAO,SAAC1B,GAAU,OAAOA,EAAKb,KAAOA,KAAK,GAC9DP,QAAQC,IAAI4C,KAGd,OACE,qBAAK/B,UAAU,WAAf,SAEE4B,EAAMK,KAAI,SAAC3B,EAAM4B,GACf,OAAO,cAAC,EAAD,CAAoB5B,KAAMA,EAAMC,YAAaA,GAAlC,MAAM2B,SCjBnBC,EAAW,SAACC,GACvB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,KCDlCI,EAAc,CACzB,UACA,UACA,WAGWC,EAAa,CACxB,MACA,SACA,QACA,OACA,OACA,UCZWC,EACJ,iBADIA,EAEF,GAFEA,EAGA,EAHAA,GAIQ,E,oEC+EJC,EAzEG,SAAEC,GAAU,IAEtBC,EAAgCD,EAAhCC,WAAYC,EAAoBF,EAApBE,MAAoBF,EAAbG,SAEVC,YAAe,CAC3BC,QAAS,CACP/C,QAAS,CACPgD,KAAM,cAKZhE,QAAQC,IAAI2D,GACZ,IAAM3E,EAAYC,aAAW,SAAC+E,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,MAAO,CACLC,OAAQ,GACRC,MAAO,QAILC,EAAcC,aAAW,SAACP,GAAD,MAAY,CAC7CQ,MAAO,CACLC,IAAK,GACLC,MAAO,EACPC,OAAO,aAAD,OAAeX,EAAMF,QAAQc,WAAWT,OAC9CU,QAAS,YALWN,CAOpBO,KAEK7E,EAAUjB,IAOV+F,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,QAAxB,OACpBD,EAAYC,EAAQF,GAAYA,GAE5B,OACE,cAACG,EAAA,EAAD,CAAW/E,SAAS,KAAK0B,MAAO,CAAEsD,WAAY,OAA9C,SACE,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACzE,UAAWZ,EAAQgE,KAAMsB,QAAS,EAAlD,SACE,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACG,cAACJ,EAAA,EAAD,CAAMC,WAAS,EAACI,QAAQ,SAASH,QAAS,EAA1C,SACG5B,EAAMb,KAAI,SAAChD,EAAO6F,GACjB,OACA,cAACN,EAAA,EAAD,CAAkBG,MAAI,EAAtB,SACA,cAACT,EAAD,CACGE,UAAYnF,EAAM8F,SAAU,EAC5BV,QAAS,SAAAF,GAAQ,OACb,cAACV,EAAD,CACAlF,MAAM,UACNyG,aAAc/F,EAAM8F,SAFpB,SAGEZ,KANT,SASI,cAACpE,EAAA,EAAD,CAAQkF,UAAWC,IAAOjE,MAAO,CAAC3C,gBAAiBuE,EAAW5D,EAAM2B,aAAcrC,MAAO,SAAS4G,UAAW,EAAGC,QAAQ,UAAxH,SACI,cAAC,IAAD,SAXGN,e,6BCnCxBjC,GAAaH,EHIqB,CACpC,SACA,UACA,UACA,UACA,UACA,WApB0B,CAC1B,UACA,UACA,UACA,UACA,UACA,WG2DIS,GAAQH,YAAe,CAC3BC,QAAS,CACP/C,QAAS,CACPgD,KAAM,cA2KGmC,OAnKf,WACE,IAAMC,EAAU5C,EACV9D,EAAQ8D,EAFD,EAImBpB,mBAnEZ,SAACiE,GACrB,IAAI3D,EAAQ,GACR4D,EAAU,GAoCd,IAlCAC,IAAMF,GAAM,SAAA9F,GACR,IAAIlB,EAEJ,GADW4D,EAAS,MACVO,EAAqB,CAC7B,IAAIgD,EAAUvD,EAAS,GAEnBtB,EAAW2B,EAAYL,EAASK,EAAYmD,SAC5CC,EAAkBzD,EAASU,GAAW8C,QACtC/E,EAAciC,GAAW+C,GACzB7E,EAAkB0B,EAAWmD,GAEjChE,EAAMnC,GAAM,CACVA,GAAIA,EACJiB,UAAU,EACVG,SAAUA,EACVD,YAAaA,EACbG,gBAAiBA,EACjB8E,KAAM9E,EAAkB,UACxBJ,IAAK+E,QAIPnH,EAAQiE,EAAYL,EAASK,EAAYmD,SACzC/D,EAAMnC,GAAM,CACVA,GAAIA,EACJiB,UAAU,EACVnC,MAAOA,EACPsH,KAAM,QACNpF,QAAS,YAMXmB,EAAM+D,QAAQH,EAAQM,KAAKlE,EAAMmE,OAAO,EAAGrD,IAWjD,OAPA+C,IAAMD,EAAQG,QAAQ,SAAAK,GACpBP,IAAMD,EAAQQ,GAAGL,QAAQ,SAAAM,GACvBT,EAAQQ,GAAGC,GAAG9E,IAAM6E,EACpBR,EAAQQ,GAAGC,GAAG7E,IAAM6E,QAIjBT,EAkBkCU,CAAcZ,GAASA,EAAQ,KAJ3D,mBAINa,EAJM,KAIIC,EAJJ,OAKmB9E,mBAAS,GAL5B,mBAKN+E,EALM,KAKIC,EALJ,OAMqBhF,mBAAS,CACzC,CACEV,YAAa,EACb2F,UAAW9D,EAAW,GACtBsC,SAAU,GAEZ,CACEnE,YAAa,EACb2F,UAAW9D,EAAW,GACtBsC,SAAU,KAfD,mBAMNyB,EANM,KAMKC,EANL,KAmBPC,EAAc,EAAErE,KAAKC,MAAM+D,EAAS,GAiCpCM,EAAqB,SAACC,EAAIC,GAC9B,IAAIC,EAhCgB,SAACF,EAAIC,GAoBzB,IAAIC,EAAY,GAQhB,OAPIF,EAAI,GAAIE,EAAUhB,KAAK,CAAC3E,IAAKyF,EAAE,EAAGxF,IAAKyF,IACvCA,EAAInE,EAAmB,GAAGoE,EAAUhB,KAAK,CAAC3E,IAAKyF,EAAGxF,IAAKyF,EAAE,IACzDA,EAAInE,EAAmB,GAAGoE,EAAUhB,KAAK,CAAC3E,IAAKyF,EAAGxF,IAAKyF,EAAE,IACzDD,EAAIlE,EAAmB,GAAGoE,EAAUhB,KAAK,CAAC3E,IAAKyF,EAAE,EAAGxF,IAAKyF,IACzDD,EAAIlE,EAAmB,GAAKmE,EAAI,GAAIC,EAAUhB,KAAK,CAAC3E,IAAKyF,EAAE,EAAGxF,IAAKyF,EAAE,IACrED,EAAI,GAAKC,EAAI,GAAGC,EAAUhB,KAAK,CAAC3E,IAAKyF,EAAE,EAAGxF,IAAKyF,IAE5CC,EAISC,CAAcH,EAAGC,GAC7BG,EAAU,GAOd,OANAvB,IAAMqB,EAAUnB,QAAQ,SAACzD,GAClBiE,EAASW,EAAU5E,GAAGf,KAAK2F,EAAU5E,GAAGd,KAAKV,UAChDsG,EAAQlB,KAAKK,EAASW,EAAU5E,GAAGf,KAAK2F,EAAU5E,GAAGd,SAIlD4F,GAwBHC,EAAO,WAEXX,EAAYD,EAAW,GAGvBZ,IAAMU,EAASR,QAAQ,SAAAxE,GACrBsE,IAAMU,EAAShF,GAAKwE,QAAQ,SAAAvE,GAC1B+E,EAAShF,GAAKC,GAAK8F,QAAS,QAKhCzB,IAAMU,EAASR,QAAQ,SAAAxE,GACrBsE,IAAMU,EAAShF,GAAKwE,QAAQ,SAAAvE,GAC1B,IAAK+E,EAAShF,GAAKC,GAAK8F,SACtBf,EAAShF,GAAKC,GAAK8F,QAAS,EACxBf,EAAShF,GAAKC,GAAKT,IAAM,IAAM0F,EAAW,IAAM,GAAKA,EAAW,IAAM,IACxEF,EAAShF,GAAKC,GAAKT,MAIjBwF,EAAShF,GAAKC,GAAKV,UAAqC,IAAzByF,EAAShF,GAAKC,GAAKT,KAAQ,CAC5D,IAAIqG,EAAUL,EAAmBxF,EAAKC,GAChC+F,EAAOH,EAAQ7E,EAAS6E,EAAQrB,SAChCwB,GA7CI,SAACP,EAAGC,GACtB,IAAIjB,EAAkBzD,EAASU,GAAW8C,QACtC/E,EAAciC,GAAW+C,GACzB7E,EAAkB0B,EAAWmD,GAC7B/E,EAAW2B,EAAYL,EAASK,EAAYmD,SAChDQ,EAASS,GAAGC,GAAK,CACbnG,UAAU,EACVE,YAAaA,EACbG,gBAAiBA,EACjBF,SAAUA,EACVgF,KAAM9E,EAAkB,UACxBN,QAAS,SACTU,IAAKyF,EACLxF,IAAKyF,EACLlG,IAAK,EACLuG,QAAQ,GAEVd,EAAYD,GA4BMiB,CAAYD,EAAKhG,IAAKgG,EAAK/F,aAW7CiG,EAAY,GAQhB,OALKhB,EAAW,IAAM,EAAKgB,EAAY,cAAC,IAAD,CAAW9B,KAAM,GAAItE,MAAO,CAAC3C,gBAAiB,UAAW0F,QAAS,UAAWsD,aAAc,OAAQxD,OAAQ,qBACxIuC,EAAW,IAAM,EAAMgB,EAAY,cAAC,IAAD,CAAY9B,KAAM,GAAItE,MAAO,CAAC3C,gBAAiB,UAAW0F,QAAS,UAAWsD,aAAc,OAAQxD,OAAQ,qBAC/IuC,EAAW,IAAM,IAAMgB,EAAY,cAAC,IAAD,CAAwB9B,KAAM,GAAItE,MAAO,CAAC3C,gBAAiB,UAAW0F,QAAS,UAAWsD,aAAc,OAAQxD,OAAQ,sBAInK,cAACyD,EAAA,EAAD,CAAepE,MAAOA,GAAtB,SACA,qBAAKnD,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACCpB,EACA,cAAC4I,EAAA,EAAD,CAAKpC,QAAQ,WAAW7G,MAAM,UAAUsB,QAAS,WAC7CoH,KACChG,MAAO,CACRwG,OAAQ,OAHZ,SAKE,cAAC,KAAD,MAEF,4BAAIJ,IACJ,kCAAK,OAAOX,EAAZ,OACD,cAAC,EAAD,CAAW7D,WAAYA,GAAYC,MAAO0D,EAAWzD,SAAU0D,IAU/D,qBAAKzG,UAAU,YAAYiB,MAAO,CAACsD,WAAY,OAA/C,SACG4B,EAASlE,KAAI,SAACyF,EAASxF,GACtB,OAAO,cAAC,EAAD,CAASN,MAAO8F,EAAS7F,UAAWsE,EAAUrE,gBAAiBsE,iBC5OhFuB,IAASC,OAEL,mCACA,cAAC,GAAD,MAGFC,SAASC,eAAe,U","file":"static/js/main.5a691fd1.chunk.js","sourcesContent":["import CancelIcon from '@material-ui/icons/Cancel';\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Button from '@material-ui/core/Button';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport LibraryAddIcon from '@material-ui/icons/LibraryAdd';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { useState } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { red, blue } from '@material-ui/core/colors';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  red: {\r\n    backgroundColor: red[100],\r\n    color: red[600],\r\n  },\r\n  blue: {\r\n    backgroundColor: blue[100],\r\n    color: blue[600]\r\n  }\r\n});\r\n\r\nconst OptionsDialog = props => {\r\n\r\n  let { onClose, title, selectedValue, open } = props;\r\n\r\n\r\n  const handleClose = () => {\r\n    onClose(selectedValue);\r\n  };\r\n\r\n  const handleListItemClick = (value) => {\r\n    console.log(value);\r\n    onClose(value);\r\n  };\r\n\r\n  let classes = useStyles();\r\n\r\n\r\n  return (\r\n    <Dialog onClose={handleClose} aria-labelledby=\"simple-dialog-title\" open={open} maxWidth={true}>\r\n        <DialogTitle id=\"simple-dialog-title\">{title}</DialogTitle>\r\n        <List>\r\n          <ListItem button onClick={() => handleListItemClick('gather')}>\r\n            <ListItemAvatar>\r\n              <Avatar className={classes.blue}>\r\n                <LibraryAddIcon />\r\n              </Avatar>\r\n            </ListItemAvatar>\r\n            <ListItemText primary=\"Gather\" />\r\n          </ListItem>\r\n\r\n          <ListItem button onClick={() => handleListItemClick('delete')}>\r\n            <ListItemAvatar>\r\n              <Avatar className={classes.red}>\r\n                <DeleteForeverIcon />\r\n              </Avatar>\r\n            </ListItemAvatar>\r\n            <ListItemText primary=\"Delete\" />\r\n          </ListItem>\r\n        </List>\r\n        <DialogActions>\r\n         <Button onClick={handleClose} color=\"primary\">\r\n          <CancelIcon />\r\n         </Button>\r\n       </DialogActions>\r\n      </Dialog>\r\n  )\r\n}\r\nexport default OptionsDialog;\r\n","import LocalFlorist from \"@material-ui/icons/LocalFlorist\";\r\nimport SpaIcon from '@material-ui/icons/Spa';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { useState } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport OptionsDialog from \"./../OptionsDialog\";\r\n\r\n\r\n\r\nconst Plot = props => {\r\n  let plot = props.plot;\r\n  let handleClick = props.handleClick;\r\n  let classy = \"hexagon \"+plot.content;\r\n  let content = \"\";\r\n  let color = \"\"\r\n\r\n  if (plot.isFlower && plot.age >=1 ) {\r\n    color = plot.flowerColor;\r\n    content = <LocalFlorist />\r\n  };\r\n  if (plot.isFlower && plot.age < 1 ){\r\n    color = plot.budColor;\r\n    content = <SpaIcon />;\r\n  }\r\n\r\n  if (!plot.isFlower){\r\n    color = plot.color;\r\n  }\r\n\r\n  let plotTitle = plot.isFlower ? plot.flowerColorName + \" Flower\" : \"Empty Plot\";\r\n  let tooltipContent = <><p>{plotTitle}</p><p style={{fontSize: 14}}>{plot.row}, {plot.col}</p></>;\r\n  let plotStyle = { backgroundColor: color };\r\n\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [selectedValue, setSelectedValue] = useState(\"delete\");\r\n\r\n\r\nconst onClose = (value) => {\r\n  setOpen(false);\r\n  setSelectedValue(value);\r\n};\r\n\r\n  return (\r\n    <>\r\n    <Tooltip title={tooltipContent} arrow>\r\n    <div className={classy} style={plotStyle} onClick={()=>{\r\n      handleClick(plot.id);\r\n      setOpen(true);\r\n    }} >\r\n      <div className=\"hexagontent\">\r\n        {content}\r\n      </div>\r\n    </div>\r\n    </Tooltip>\r\n    { plot.isFlower && plot.age &&\r\n      <OptionsDialog onClose={onClose} title={plotTitle} open={open} selectedValue={selectedValue} />\r\n    }\r\n\r\n      </>\r\n  )\r\n\r\n}\r\nexport default Plot;\r\n","import { useState } from \"react\";\r\nimport Plot from \"./Plot\";\r\n\r\nconst PlotRow = (props) => {\r\n  const plots = props.plots;\r\n  const gridState = props.gridState;\r\n  const gridStateSetter = props.gridStateSetter;\r\n\r\n  const handleClick = (id) => {\r\n    let thePlot = plots.filter((plot) => {return plot.id === id})[0];\r\n    console.log(thePlot);\r\n  }\r\n\r\n  return (\r\n    <div className=\"ibws-fix\">\r\n    {\r\n      plots.map((plot, i)=>{\r\n        return <Plot key={\"key\"+i} plot={plot} handleClick={handleClick} />\r\n      })\r\n    }\r\n    </div>\r\n  )\r\n}\r\nexport default PlotRow;\r\n","export const rollUpTo = (max) => {\r\n  return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n\r\n/*\r\n\r\nplot:\r\n\r\nid\r\nisFlower\r\nflowerColor\r\ndisplayColor\r\nage\r\nrow\r\ncol\r\nname\r\n*/\r\n","export const grassColors = [\r\n  \"#42796c\",\r\n  \"#3a514c\",\r\n  \"#185653\"\r\n]\r\n\r\nexport const colorNames = [\r\n  \"Red\",\r\n  \"Yellow\",\r\n  \"Green\",\r\n  \"Cyan\",\r\n  \"Blue\",\r\n  \"Violet\"\r\n]\r\nexport const flowerColors = [\r\n  \"#9f1f2b\", //red\r\n  \"#e0c55f\", //yellow\r\n  \"#7ddf84\", //green\r\n  \"#00c0cd\", //cyan\r\n  \"#3b66db\", //blue\r\n  \"#9e7af0\" //violet\r\n]\r\n\r\n/*\r\ntaken from here:\r\nhttps://personal.sron.nl/~pault/\r\n*/\r\n\r\nexport const flowerColorsAccessible = [\r\n  \"#e6677\", //red\r\n  \"#ccbb44\", //yellow\r\n  \"#228833\", //green\r\n  \"#66ccee\", //cyan\r\n  \"#4477aa\", //blue\r\n  \"#aa3377\" //violet\r\n]\r\n","export const gameConfig = {\r\n  title: \"tiny collector\",\r\n  rowSize: 10, // number of plots per row\r\n  fertility: 3, // 1...100, initial flower spawn rate\r\n  accessibilityMode: false\r\n}\r\n","import LocalFlorist from \"@material-ui/icons/LocalFlorist\";\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Container from '@material-ui/core/Container';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Badge from '@material-ui/core/Badge';\r\n\r\nimport { makeStyles, createMuiTheme, withStyles } from '@material-ui/core/styles';\r\n\r\n\r\n  const Inventory = ( data ) =>{\r\n\r\n    let { flowerHues, items, setItems } = data;\r\n\r\n     const theme = createMuiTheme({\r\n       palette: {\r\n         primary: {\r\n           main: \"#185653\"\r\n         },\r\n       },\r\n     });\r\n\r\n     console.log(items);\r\n     const useStyles = makeStyles((theme) => ({\r\n       root: {\r\n         flexGrow: 1\r\n       },\r\n       paper: {\r\n         height: 50,\r\n         width: 50\r\n       }\r\n     }));\r\n\r\n     const StyledBadge = withStyles((theme) => ({\r\n   badge: {\r\n     top: 35,\r\n     right: 5,\r\n     border: `2px solid ${theme.palette.background.paper}`,\r\n     padding: '0 4px',\r\n   },\r\n }))(Badge);\r\n\r\n    const classes = useStyles();\r\n\r\n\r\n    //The purpose of the Wrapper function is to ensure that\r\n    // the element is only wrapped if the condition is met.\r\n    // We only want the quantity badge to appear if the\r\n    // quantity is greater than 1.\r\n    const Wrapper = ({ children, condition, wrapper }) =>\r\ncondition ? wrapper(children) : children;\r\n\r\n    return (\r\n      <Container maxWidth=\"sm\" style={{ paddingTop: \"1em\"}}>\r\n        <Grid container className={classes.root} spacing={2}>\r\n          <Grid item xs={12}>\r\n             <Grid container justify=\"center\" spacing={1}>\r\n               {items.map((value, index) => {\r\n                 return(\r\n                 <Grid key={index} item>\r\n                 <Wrapper\r\n                    condition={ value.quantity >1 }\r\n                    wrapper={children =>\r\n                        <StyledBadge\r\n                        color=\"primary\"\r\n                        badgeContent={value.quantity}\r\n                        >{children}\r\n                        </StyledBadge>\r\n                    }>\r\n                     <Avatar component={Paper} style={{backgroundColor: flowerHues[value.flowerColor], color: \"white\"}}elevation={1} variant=\"rounded\">\r\n                         <LocalFlorist />\r\n                       </Avatar>\r\n                      </Wrapper>\r\n\r\n                 </Grid>\r\n               )})}\r\n             </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    )\r\n  };\r\n\r\n  export default Inventory;\r\n","import './styles/App.css';\r\nimport times from 'lodash/times';\r\nimport PlotRow from './components/PlotGrid/PlotRow';\r\nimport { useState } from 'react';\r\nimport { rollUpTo } from './utils/dice';\r\nimport { grassColors, flowerColors, flowerColorsAccessible, colorNames } from './constants/colors';\r\nimport { gameConfig } from './config/gameConfig';\r\nimport { WiDaySunny, WiSunrise, WiNightAltPartlyCloudy } from \"weather-icons-react\";\r\nimport LocalFlorist from \"@material-ui/icons/LocalFlorist\";\r\nimport Fab from '@material-ui/core/Fab';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Inventory from './components/Inventory';\r\n\r\n\r\nimport {\r\n  createMuiTheme,\r\n  Theme,\r\n  ThemeProvider,\r\n} from '@material-ui/core/styles';\r\nimport { green, purple } from '@material-ui/core/colors';\r\nimport Button from '@material-ui/core/Button';\r\nimport UpdateIcon from '@material-ui/icons/Update';\r\n\r\n\r\nlet flowerHues = gameConfig.accessibilityMode ? flowerColorsAccessible : flowerColors;\r\n\r\n//returns a 2D array \"plot\" objects: {id, isFlower, color, name, content, row, column}\r\nconst generatePlots = (size) => {\r\n  let plots = [];\r\n  let plots2D = [];\r\n\r\n  times(size, id => {\r\n      let color;\r\n      let dice = rollUpTo(100); // roll a 100 sided die\r\n      if (dice<=gameConfig.fertility){ // chance of rolling a flower\r\n        var ageRoll = rollUpTo(2); // select age\r\n\r\n        var budColor = grassColors[rollUpTo(grassColors.length)];\r\n        var flowerColorRoll = rollUpTo(flowerHues.length);\r\n        var flowerColor = flowerHues[flowerColorRoll];\r\n        var flowerColorName = colorNames[flowerColorRoll];\r\n\r\n        plots[id] = {\r\n          id: id,\r\n          isFlower: true,\r\n          budColor: budColor,\r\n          flowerColor: flowerColor,\r\n          flowerColorName: flowerColorName,\r\n          name: flowerColorName + \" Flower\",\r\n          age: ageRoll\r\n        };\r\n\r\n      } else {\r\n        color = grassColors[rollUpTo(grassColors.length)];\r\n        plots[id] = {\r\n          id: id,\r\n          isFlower: false,\r\n          color: color,\r\n          name: \"Empty\",\r\n          content: \"grass\"\r\n        };\r\n      }\r\n  });\r\n\r\n  //We splice it into rows, and make a 2D array of those.\r\n  while(plots.length) plots2D.push(plots.splice(0, gameConfig.rowSize));\r\n\r\n  // load up the plots with coordinate information.\r\n  // This will be used to determine neighbors later.\r\n  times(plots2D.length, r => {\r\n    times(plots2D[r].length, c => {\r\n      plots2D[r][c].row = r;\r\n      plots2D[r][c].col = c;\r\n    });\r\n  });\r\n\r\n  return plots2D;\r\n}\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: \"#185653\"\r\n    },\r\n  },\r\n});\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n  const rowSize = gameConfig.rowSize;\r\n  const title = gameConfig.title;\r\n\r\n  const [plotGrid, setPlotGrid] = useState(generatePlots(rowSize*(rowSize-1)));\r\n  const [trueTime, setTrueTime] = useState(0);\r\n  const [inventory, setInventory] = useState([\r\n    {\r\n      flowerColor: 0,\r\n      colorName: colorNames[0],\r\n      quantity: 3\r\n    },\r\n    {\r\n      flowerColor: 4,\r\n      colorName: colorNames[4],\r\n      quantity: 1\r\n    }\r\n]);\r\n\r\n  const displayTime = 1+Math.floor(trueTime/3);\r\n\r\n  const findNeighbors = (x , y) => {\r\n\r\n    /*\r\n    neighbors will depend on whether y is even or odd\r\n    clockwise:\r\n    up: x-1, y\r\n    upright: x-1, y+1\r\n    downright: x, y+1\r\n    down: x+1, y\r\n    downleft: x+1, y-1\r\n    upleft: x-1, y-1\r\n\r\n    if x>0, get up\r\n    if x>0 && y<gameConfig.rowSize, get upright\r\n    if y<gameConfig.rowSize, get downRight\r\n    if x<gameConfig.rowSize-1, get down\r\n    if x<gameConfig.rowSize-1 && y>0, get downleft\r\n    if x>0 and y>0, get upleft\r\n    */\r\n\r\n    let neighbors = [];\r\n    if (x > 0)  neighbors.push({row: x-1, col: y});\r\n    if (y < gameConfig.rowSize-1) neighbors.push({row: x, col: y+1});\r\n    if (y < gameConfig.rowSize-1) neighbors.push({row: x, col: y+1});\r\n    if (x < gameConfig.rowSize-2) neighbors.push({row: x+1, col: y});\r\n    if (x < gameConfig.rowSize-2 && y > 0 ) neighbors.push({row: x+1, col: y-1});\r\n    if (x > 0 && y > 0) neighbors.push({row: x-1, col: y});\r\n\r\n    return neighbors;\r\n  }\r\n\r\n  const findEmptyNeighbors = (x , y) =>{\r\n    let neighbors = findNeighbors(x, y);\r\n    let empties = [];\r\n    times(neighbors.length, (i) => {\r\n      if (!plotGrid[neighbors[i].row][neighbors[i].col].isFlower){\r\n        empties.push(plotGrid[neighbors[i].row][neighbors[i].col]);\r\n      }\r\n    });\r\n\r\n    return empties;\r\n  }\r\n\r\n  const plantFlower = (x, y) => {\r\n    var flowerColorRoll = rollUpTo(flowerHues.length);\r\n    let flowerColor = flowerHues[flowerColorRoll];\r\n    let flowerColorName = colorNames[flowerColorRoll];\r\n    let budColor = grassColors[rollUpTo(grassColors.length)];\r\n    plotGrid[x][y] = {\r\n        isFlower: true,\r\n        flowerColor: flowerColor,\r\n        flowerColorName: flowerColorName,\r\n        budColor: budColor,\r\n        name: flowerColorName + \" Flower\",\r\n        content: \"flower\",\r\n        row: x,\r\n        col: y,\r\n        age: 0,\r\n        marked: true\r\n      };\r\n      setPlotGrid(plotGrid);\r\n\r\n    }\r\n\r\n  const step = () => {\r\n    // first we increment time\r\n    setTrueTime(trueTime + 1);\r\n\r\n    //unmark everyone\r\n    times(plotGrid.length, row => {\r\n      times(plotGrid[row].length, col=> {\r\n        plotGrid[row][col].marked = false;\r\n      });\r\n    });\r\n\r\n    //then we let our adults breed\r\n    times(plotGrid.length, row => {\r\n      times(plotGrid[row].length, col=> {\r\n        if (!plotGrid[row][col].marked){\r\n          plotGrid[row][col].marked = true;\r\n          if (plotGrid[row][col].age < 2 && (trueTime % 3 === 2 || trueTime % 3 === 0)) {\r\n            plotGrid[row][col].age ++;\r\n            //ensure we don't age this spot again\r\n          };\r\n\r\n          if (plotGrid[row][col].isFlower && plotGrid[row][col].age===2){\r\n            let empties = findEmptyNeighbors(row, col);\r\n              let pick = empties[rollUpTo(empties.length)];\r\n              if (pick) plantFlower(pick.row, pick.col);\r\n          }\r\n        }\r\n\r\n      });\r\n    });\r\n\r\n\r\n\r\n  }\r\n\r\n  let timeOfDay = \"\";\r\n\r\n  // TODO: this is hideous. Make a component for this weather icon.\r\n  if ( trueTime % 3 === 0) { timeOfDay = <WiSunrise size={40} style={{backgroundColor: '#d47986', padding: '3 2 0 2', borderRadius: '10px', border: '2px solid white'}}/>; }\r\n  else if ( trueTime % 3 === 1 ) { timeOfDay = <WiDaySunny size={40} style={{backgroundColor: '#dbbd72', padding: '3 2 0 2', borderRadius: '10px', border: '2px solid white'}}/>; }\r\n  else if ( trueTime % 3 === 2 ) { timeOfDay = <WiNightAltPartlyCloudy size={40} style={{backgroundColor: '#739cde', padding: '3 2 0 2', borderRadius: '10px', border: '2px solid white'}}/>; }\r\n\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n      {title}\r\n       <Fab variant=\"extended\" color=\"primary\" onClick={() =>{\r\n           step();\r\n         }} style={{\r\n           margin: \"1em\"\r\n         }}>\r\n         <UpdateIcon />\r\n       </Fab>\r\n       <p>{timeOfDay}</p>\r\n       <p> {'Day '+displayTime} </p>\r\n      <Inventory flowerHues={flowerHues} items={inventory} setItems={setInventory}/>\r\n\r\n     {/*\r\n     I get that it would probably be a good idea to\r\n     have another component called PlotGrid or something\r\n     but really all it would do is wrap this set of PlotRows\r\n     in a div with this className. and that just isn't enough\r\n     stuff to justify a whole file or even its own variable\r\n     I think\r\n     */}\r\n      <div className=\"honeycomb\" style={{paddingTop: \"2em\"}}>\r\n        {plotGrid.map((plotRow, i) => {\r\n          return <PlotRow plots={plotRow} gridState={plotGrid} gridStateSetter={setPlotGrid} />\r\n        })}\r\n      </div>\r\n      </header>\r\n    </div>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport './styles/hexagon.css';\r\nimport App from './App';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n    <>\r\n    <App />\r\n    </>,\r\n  // </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}