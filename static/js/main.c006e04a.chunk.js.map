{"version":3,"sources":["components/PlotGrid/Plot.js","components/PlotGrid/PlotRow.js","utils/dice.js","constants/colors.js","config/gameConfig.js","App.js","index.js"],"names":["Plot","props","plot","handleClick","classy","content","color","isFlower","age","flowerColor","budColor","tooltipContent","style","fontSize","row","col","plotStyle","backgroundColor","Tooltip","title","arrow","className","onClick","id","PlotRow","plots","gridState","gridStateSetter","thePlot","filter","console","log","map","i","rollUpTo","max","Math","floor","random","grassColors","colorNames","gameConfig","flowerHues","theme","createMuiTheme","palette","primary","main","App","rowSize","useState","size","plots2D","times","ageRoll","length","flowerColorRoll","flowerColorName","name","push","splice","r","c","generatePlots","plotGrid","setPlotGrid","trueTime","setTrueTime","displayTime","findEmptyNeighbors","x","y","neighbors","findNeighbors","empties","step","marked","pick","plantFlower","timeOfDay","padding","borderRadius","border","ThemeProvider","Button","variant","margin","paddingTop","plotRow","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c006e04a.chunk.js","sourcesContent":["import LocalFlorist from \"@material-ui/icons/LocalFlorist\";\r\nimport SpaIcon from '@material-ui/icons/Spa';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nconst Plot = props => {\r\n  let plot = props.plot;\r\n  let handleClick = props.handleClick;\r\n  let classy = \"hexagon \"+plot.content;\r\n  let content = \"\";\r\n  let color = \"\"\r\n\r\n  if (plot.isFlower && plot.age >=1 ) {\r\n    color = plot.flowerColor;\r\n    content = <LocalFlorist />\r\n  };\r\n  if (plot.isFlower && plot.age < 1 ){\r\n    color = plot.budColor;\r\n    content = <SpaIcon />;\r\n  }\r\n\r\n  if (!plot.isFlower){\r\n    color = plot.color;\r\n  }\r\n\r\n  let tooltipContent = <p style={{fontSize: 14}}>{plot.row}, {plot.col}</p>\r\n  let plotStyle = { backgroundColor: color };\r\n  return (\r\n    <Tooltip title={tooltipContent} arrow>\r\n    <div className={classy} style={plotStyle} onClick={()=>{\r\n      handleClick(plot.id);\r\n    }} >\r\n      <div className=\"hexagontent\">\r\n        {content}\r\n      </div>\r\n    </div>\r\n    </Tooltip>\r\n  )\r\n\r\n}\r\nexport default Plot;\r\n","import { useState } from \"react\";\r\nimport Plot from \"./Plot\";\r\n\r\nconst PlotRow = (props) => {\r\n  const plots = props.plots;\r\n  const gridState = props.gridState;\r\n  const gridStateSetter = props.gridStateSetter;\r\n\r\n  const handleClick = (id) => {\r\n    let thePlot = plots.filter((plot) => {return plot.id === id})[0];\r\n    console.log(thePlot);\r\n  }\r\n\r\n  return (\r\n    <div className=\"ibws-fix\">\r\n    {\r\n      plots.map((plot, i)=>{\r\n        return <Plot key={\"key\"+i} plot={plot} handleClick={handleClick} />\r\n      })\r\n    }\r\n    </div>\r\n  )\r\n}\r\nexport default PlotRow;\r\n","export const rollUpTo = (max) => {\r\n  return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n\r\n/*\r\n\r\nplot:\r\n\r\nid\r\nisFlower\r\nflowerColor\r\ndisplayColor\r\nage\r\nrow\r\ncol\r\nname\r\n*/\r\n","export const grassColors = [\r\n  \"#42796c\",\r\n  \"#3a514c\",\r\n  \"#185653\"\r\n]\r\n\r\nexport const colorNames = [\r\n  \"Red\",\r\n  \"Yellow\",\r\n  \"Green\",\r\n  \"Cyan\",\r\n  \"Blue\",\r\n  \"Violet\"\r\n]\r\nexport const flowerColors = [\r\n  \"#9f1f2b\", //red\r\n  \"#e0c55f\", //yellow\r\n  \"#7ddf84\", //green\r\n  \"#00c0cd\", //cyan\r\n  \"#3b66db\", //blue\r\n  \"#9e7af0\" //violet\r\n]\r\n\r\n/*\r\ntaken from here:\r\nhttps://personal.sron.nl/~pault/\r\n*/\r\n\r\nexport const flowerColorsAccessible = [\r\n  \"#e6677\", //red\r\n  \"#ccbb44\", //yellow\r\n  \"#228833\", //green\r\n  \"#66ccee\", //cyan\r\n  \"#4477aa\", //blue\r\n  \"#aa3377\" //violet\r\n]\r\n","export const gameConfig = {\r\n  title: \"tiny collector\",\r\n  rowSize: 9, // number of plots per row\r\n  fertility: 3, // 1...100, initial flower spawn rate\r\n  accessibilityMode: false\r\n}\r\n","import './styles/App.css';\r\nimport times from 'lodash/times';\r\nimport PlotRow from './components/PlotGrid/PlotRow';\r\nimport { useState } from 'react';\r\nimport { rollUpTo } from './utils/dice';\r\nimport { grassColors, flowerColors, flowerColorsAccessible, colorNames } from './constants/colors';\r\nimport { gameConfig } from './config/gameConfig';\r\nimport { WiDaySunny, WiSunrise, WiNightAltPartlyCloudy } from \"weather-icons-react\";\r\n\r\n\r\nimport {\r\n  createMuiTheme,\r\n  createStyles,\r\n  withStyles,\r\n  makeStyles,\r\n  Theme,\r\n  ThemeProvider,\r\n} from '@material-ui/core/styles';\r\nimport { green, purple } from '@material-ui/core/colors';\r\nimport Button from '@material-ui/core/Button';\r\nimport UpdateIcon from '@material-ui/icons/Update';\r\n\r\n\r\nlet flowerHues = gameConfig.accessibilityMode ? flowerColorsAccessible : flowerColors;\r\n\r\n//returns a 2D array \"plot\" objects: {id, isFlower, color, name, content, row, column}\r\nconst generatePlots = (size) => {\r\n  let plots = [];\r\n  let plots2D = [];\r\n\r\n  times(size, id => {\r\n      let color;\r\n      let dice = rollUpTo(100); // roll a 100 sided die\r\n      if (dice<=gameConfig.fertility){ // chance of rolling a flower\r\n        var ageRoll = rollUpTo(2); // select age\r\n\r\n        var budColor = grassColors[rollUpTo(grassColors.length)];\r\n        var flowerColorRoll = rollUpTo(flowerHues.length);\r\n        var flowerColor = flowerHues[flowerColorRoll];\r\n        var flowerColorName = colorNames[flowerColorRoll];\r\n\r\n        plots[id] = {\r\n          id: id,\r\n          isFlower: true,\r\n          budColor: budColor,\r\n          flowerColor: flowerColor,\r\n          flowerColorName: flowerColorName,\r\n          name: flowerColorName + \" Flower\",\r\n          age: ageRoll\r\n        };\r\n\r\n      } else {\r\n        color = grassColors[rollUpTo(grassColors.length)];\r\n        plots[id] = {\r\n          id: id,\r\n          isFlower: false,\r\n          color: color,\r\n          name: \"Empty\",\r\n          content: \"grass\"\r\n        };\r\n      }\r\n  });\r\n\r\n  //We splice it into rows, and make a 2D array of those.\r\n  while(plots.length) plots2D.push(plots.splice(0, gameConfig.rowSize));\r\n\r\n  // load up the plots with coordinate information.\r\n  // This will be used to determine neighbors later.\r\n  times(plots2D.length, r => {\r\n    times(plots2D[r].length, c => {\r\n      plots2D[r][c].row = r;\r\n      plots2D[r][c].col = c;\r\n    });\r\n  });\r\n\r\n  return plots2D;\r\n}\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: \"#185653\"\r\n    },\r\n  },\r\n});\r\n\r\n\r\nfunction App() {\r\n  const rowSize = gameConfig.rowSize;\r\n  const title = gameConfig.title;\r\n\r\n  const [plotGrid, setPlotGrid] = useState(generatePlots(rowSize*(rowSize-1)));\r\n  const [trueTime, setTrueTime] = useState(0);\r\n  const displayTime = 1+Math.floor(trueTime/3);\r\n\r\n  const findNeighbors = (x , y) => {\r\n    /*\r\n    clockwise:\r\n    up: x-1, y\r\n    upright: x-1, y+1\r\n    downright: x, y+1\r\n    down: x+1, y\r\n    downleft: x+1, y-1\r\n    upleft: x-1, y-1\r\n\r\n    if x>0, get up\r\n    if x>0 && y<gameConfig.rowSize, get upright\r\n    if y<gameConfig.rowSize, get downRight\r\n    if x<gameConfig.rowSize-1, get down\r\n    if x<gameConfig.rowSize-1 && y>0, get downleft\r\n    if x>0 and y>0, get upleft\r\n    */\r\n\r\n    let neighbors = [];\r\n    if (x > 0)  neighbors.push({row: x-1, col: y});\r\n    if (y < gameConfig.rowSize-1) neighbors.push({row: x, col: y+1});\r\n    if (y < gameConfig.rowSize-1) neighbors.push({row: x, col: y+1});\r\n    if (x < gameConfig.rowSize-2) neighbors.push({row: x+1, col: y});\r\n    if (x < gameConfig.rowSize-2 && y > 0 ) neighbors.push({row: x+1, col: y-1});\r\n    if (x > 0 && y > 0) neighbors.push({row: x-1, col: y});\r\n\r\n    return neighbors;\r\n  }\r\n\r\n  let findEmptyNeighbors = (x , y) =>{\r\n    let neighbors = findNeighbors(x, y);\r\n    let empties = [];\r\n    times(neighbors.length, (i) => {\r\n      if (!plotGrid[neighbors[i].row][neighbors[i].col].isFlower){\r\n        empties.push(plotGrid[neighbors[i].row][neighbors[i].col]);\r\n      }\r\n    });\r\n\r\n    return empties;\r\n  }\r\n\r\n  const plantFlower = (x, y) => {\r\n    var flowerColorRoll = rollUpTo(flowerHues.length);\r\n    let flowerColor = flowerHues[flowerColorRoll];\r\n    let flowerColorName = colorNames[flowerColorRoll];\r\n    let budColor = grassColors[rollUpTo(grassColors.length)];\r\n    plotGrid[x][y] = {\r\n        isFlower: true,\r\n        flowerColor: flowerColor,\r\n        flowerColorName: flowerColorName,\r\n        budColor: budColor,\r\n        name: flowerColorName + \" Flower\",\r\n        content: \"flower\",\r\n        row: x,\r\n        col: y,\r\n        age: 0,\r\n        marked: true\r\n      };\r\n      setPlotGrid(plotGrid);\r\n\r\n}\r\n  const step = () => {\r\n    // first we increment time\r\n    setTrueTime(trueTime + 1);\r\n\r\n    //unmark everyone\r\n    times(plotGrid.length, row => {\r\n      times(plotGrid[row].length, col=> {\r\n        plotGrid[row][col].marked = false;\r\n      });\r\n    });\r\n\r\n    //then we let our adults breed\r\n    times(plotGrid.length, row => {\r\n      times(plotGrid[row].length, col=> {\r\n        if (!plotGrid[row][col].marked){\r\n          plotGrid[row][col].marked = true;\r\n          if (plotGrid[row][col].age < 2) {\r\n            plotGrid[row][col].age ++;\r\n            //ensure we don't age this spot again\r\n          };\r\n\r\n          if (plotGrid[row][col].isFlower && plotGrid[row][col].age===2){\r\n            let empties = findEmptyNeighbors(row, col);\r\n              let pick = empties[rollUpTo(empties.length)];\r\n              if (pick) plantFlower(pick.row, pick.col);\r\n          }\r\n        }\r\n\r\n      });\r\n    });\r\n\r\n\r\n\r\n  }\r\n\r\n  let timeOfDay = \"\";\r\n\r\n  if ( trueTime % 3 === 0) { timeOfDay = <WiSunrise size={40} style={{backgroundColor: '#d47986', padding: '3 2 0 2', borderRadius: '10px', border: '2px solid white'}}/>; }\r\n  else if ( trueTime % 3 === 1 ) { timeOfDay = <WiDaySunny size={40} style={{backgroundColor: '#dbbd72', padding: '3 2 0 2', borderRadius: '10px', border: '2px solid white'}}/>; }\r\n  else if ( trueTime % 3 === 2 ) { timeOfDay = <WiNightAltPartlyCloudy size={40} style={{backgroundColor: '#739cde', padding: '3 2 0 2', borderRadius: '10px', border: '2px solid white'}}/>; }\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n      {title}\r\n       <Button variant=\"contained\" color=\"primary\" onClick={() =>{\r\n           step();\r\n         }} style={{\r\n           margin: \"1em\"\r\n         }}>\r\n         <UpdateIcon />\r\n       </Button>\r\n       <p>{timeOfDay}</p>\r\n       <p> {'Day '+displayTime} </p>\r\n\r\n     {/*\r\n     I get that it would probably be a good idea to\r\n     have another component called PlotGrid or something\r\n     but really all it would do is wrap this set of PlotRows\r\n     in a div with this className. and that just isn't enough\r\n     stuff to justify a whole file or even its own variable\r\n     I think\r\n     */}\r\n      <div className=\"honeycomb\" style={{paddingTop: \"2em\"}}>\r\n        {plotGrid.map((plotRow, i) => {\r\n          return <PlotRow plots={plotRow} gridState={plotGrid} gridStateSetter={setPlotGrid} />\r\n        })}\r\n      </div>\r\n      </header>\r\n    </div>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport './styles/hexagon.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}