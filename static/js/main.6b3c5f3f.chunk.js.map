{"version":3,"sources":["components/PlotGrid/Plot.js","components/PlotGrid/PlotRow.js","utils/dice.js","constants/colors.js","config/gameConfig.js","App.js","index.js"],"names":["Plot","props","plot","handleClick","classy","content","color","isFlower","tooltipContent","style","fontSize","name","plotStyle","backgroundColor","Tooltip","title","arrow","className","onClick","id","PlotRow","plots","gridState","gridStateSetter","thePlot","filter","console","log","map","i","rollUpTo","max","Math","floor","random","grassColors","colorNames","gameConfig","flowerHues","generatePlots","size","plots2D","times","colorRoll","length","colorName","push","splice","r","c","row","column","theme","createMuiTheme","palette","primary","main","App","rowSize","useState","plotGrid","setPlotGrid","trueTime","setTrueTime","displayTime","timeOfDay","ThemeProvider","Button","variant","margin","paddingTop","plotRow","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b3c5f3f.chunk.js","sourcesContent":["import LocalFlorist from \"@material-ui/icons/LocalFlorist\";\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nconst Plot = props => {\r\n  let plot = props.plot;\r\n  let handleClick = props.handleClick;\r\n  let classy = \"hexagon \"+plot.content;\r\n  let color = plot.color;\r\n  let content = \"\";\r\n\r\n  if (plot.isFlower) content = <LocalFlorist />;\r\n\r\n  let tooltipContent = <p style={{fontSize: 14}}>{plot.name}</p>\r\n  let plotStyle = { backgroundColor: color };\r\n  return (\r\n    <Tooltip title={tooltipContent} arrow>\r\n    <div className={classy} style={plotStyle} onClick={()=>{\r\n      handleClick(plot.id);\r\n    }} >\r\n      <div className=\"hexagontent\">\r\n        {content}\r\n      </div>\r\n    </div>\r\n    </Tooltip>\r\n  )\r\n\r\n}\r\nexport default Plot;\r\n","import { useState } from \"react\";\r\nimport Plot from \"./Plot\";\r\n\r\nconst PlotRow = (props) => {\r\n  const plots = props.plots;\r\n  const gridState = props.gridState;\r\n  const gridStateSetter = props.gridStateSetter;\r\n\r\n  const handleClick = (id) => {\r\n    let thePlot = plots.filter((plot) => {return plot.id === id})[0];\r\n    console.log(thePlot);\r\n  }\r\n\r\n  return (\r\n    <div className=\"ibws-fix\">\r\n    {\r\n      plots.map((plot, i)=>{\r\n        return <Plot key={\"key\"+i} plot={plot} handleClick={handleClick} />\r\n      })\r\n    }\r\n    </div>\r\n  )\r\n}\r\nexport default PlotRow;\r\n","export const rollUpTo = (max) => {\r\n  return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n","export const grassColors = [\r\n  \"#42796c\",\r\n  \"#3a514c\",\r\n  \"#185653\"\r\n]\r\n\r\nexport const colorNames = [\r\n  \"Red\",\r\n  \"Yellow\",\r\n  \"Green\",\r\n  \"Cyan\",\r\n  \"Blue\",\r\n  \"Violet\"\r\n]\r\nexport const flowerColors = [\r\n  \"#9f1f2b\", //red\r\n  \"#e0c55f\", //yellow\r\n  \"#7ddf84\", //green\r\n  \"#00c0cd\", //cyan\r\n  \"#3b66db\", //blue\r\n  \"#9e7af0\" //violet\r\n]\r\n\r\n/*\r\ntaken from here:\r\nhttps://personal.sron.nl/~pault/\r\n*/\r\n\r\nexport const flowerColorsAccessible = [\r\n  \"#e6677\", //red\r\n  \"#ccbb44\", //yellow\r\n  \"#228833\", //green\r\n  \"#66ccee\", //cyan\r\n  \"#4477aa\", //blue\r\n  \"#aa3377\" //violet\r\n]\r\n","export const gameConfig = {\r\n  title: \"tiny collector\",\r\n  rowSize: 9, // number of plots per row\r\n  fertility: 3, // 1...100, initial flower spawn rate\r\n  accessibilityMode: false\r\n}\r\n","import './styles/App.css';\r\nimport times from 'lodash/times';\r\nimport PlotRow from './components/PlotGrid/PlotRow';\r\nimport { useState } from 'react';\r\nimport { rollUpTo } from './utils/dice';\r\nimport { grassColors, flowerColors, flowerColorsAccessible, colorNames } from './constants/colors';\r\nimport { gameConfig } from './config/gameConfig';\r\nimport { WiDaySunny, WiSunrise, WiNightAltPartlyCloudy } from \"weather-icons-react\";\r\n\r\n\r\nimport {\r\n  createMuiTheme,\r\n  createStyles,\r\n  withStyles,\r\n  makeStyles,\r\n  Theme,\r\n  ThemeProvider,\r\n} from '@material-ui/core/styles';\r\nimport { green, purple } from '@material-ui/core/colors';\r\nimport Button from '@material-ui/core/Button';\r\nimport UpdateIcon from '@material-ui/icons/Update';\r\n\r\n\r\nlet flowerHues = gameConfig.accessibilityMode ? flowerColorsAccessible : flowerColors;\r\n\r\n//returns a 2D array \"plot\" objects: {id, isFlower, color, name, content, row, column}\r\nconst generatePlots = (size) => {\r\n  let plots = [];\r\n  let plots2D = [];\r\n\r\n  times(size, id => {\r\n      let color;\r\n      let dice = rollUpTo(100); // roll a 100 sided die\r\n      if (dice<=gameConfig.fertility){ // chance of rolling a flower\r\n\r\n        var colorRoll = rollUpTo(flowerHues.length); //Select a flower hue\r\n        color = flowerHues[colorRoll];\r\n        let colorName = colorNames[colorRoll]; //Get its matching color name\r\n        plots[id] = {\r\n          id: id,\r\n          isFlower: true,\r\n          color: color,\r\n          name: colorName + \" Flower\",\r\n          content: \"flower\"\r\n        };\r\n\r\n      } else {\r\n        color = grassColors[rollUpTo(grassColors.length)];\r\n        plots[id] = {\r\n          id: id,\r\n          isFlower: false,\r\n          color: color,\r\n          name: \"Empty\",\r\n          content: \"grass\"\r\n        };\r\n      }\r\n  });\r\n\r\n  //We splice it into rows, and make a 2D array of those.\r\n  while(plots.length) plots2D.push(plots.splice(0, gameConfig.rowSize));\r\n\r\n  // load up the plots with coordinate information.\r\n  // This will be used to determine neighbors later.\r\n  times(plots2D.length, r => {\r\n    times(plots2D[r].length, c => {\r\n      plots2D[r][c].row = r;\r\n      plots2D[r][c].column = c;\r\n    });\r\n  });\r\n\r\n  return plots2D;\r\n}\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: \"#185653\"\r\n    },\r\n  },\r\n});\r\n\r\n\r\nfunction App() {\r\n  const rowSize = gameConfig.rowSize;\r\n  const title = gameConfig.title;\r\n\r\n  const [plotGrid, setPlotGrid] = useState(generatePlots(rowSize*(rowSize-1)));\r\n  const [trueTime, setTrueTime] = useState(0);\r\n\r\n  const displayTime = 1+Math.floor(trueTime/3);\r\n\r\n  const step = () => {\r\n    setTrueTime(trueTime + 1);\r\n    setPlotGrid(generatePlots(rowSize*(rowSize-1)));\r\n  }\r\n  let timeOfDay = \"\";\r\n  if ( trueTime % 3 === 0) { timeOfDay = <WiSunrise />; }\r\n  else if ( trueTime % 3 === 1 ) { timeOfDay = <WiDaySunny />; }\r\n  else if ( trueTime % 3 === 2 ) { timeOfDay = <WiNightAltPartlyCloudy />; }\r\n\r\n  return (\r\n    <>\r\n    <ThemeProvider theme={theme}>\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n      {title}\r\n       <Button variant=\"contained\" color=\"primary\" onClick={() =>{\r\n           step();\r\n         }} style={{\r\n           margin: \"1em\"\r\n         }}>\r\n         <UpdateIcon />\r\n       </Button>\r\n       <p>{timeOfDay}</p>\r\n       <p> {'Day '+displayTime} </p>\r\n\r\n     {/*\r\n     I get that it would probably be a good idea to\r\n     have another component called PlotGrid or something\r\n     but really all it would do is wrap this set of PlotRows\r\n     in a div with this className. and that just isn't enough\r\n     stuff to justify a whole file or even its own variable\r\n     I think\r\n     */}\r\n      <div className=\"honeycomb\" style={{paddingTop: \"2em\"}}>\r\n        {plotGrid.map((plotRow, i) => {\r\n          return <PlotRow plots={plotRow} gridState={plotGrid} gridStateSetter={setPlotGrid} />\r\n        })}\r\n      </div>\r\n      </header>\r\n    </div>\r\n    </ThemeProvider>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport './styles/hexagon.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}