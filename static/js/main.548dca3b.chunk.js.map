{"version":3,"sources":["logo.svg","components/PlotGrid.js","App.js","reportWebVitals.js","index.js"],"names":["Plot","props","plot","classy","content","color","Math","floor","random","isFlower","className","style","backgroundColor","onClick","id","console","log","PlotRow","plots","map","i","generatePlots","size","times","max","dice","App","plots2D","hexagons","rowSize","length","push","splice","index","index2","row","column","paddingTop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAAe,I,4CCGf,SAASA,EAAKC,GACZ,IAAIC,EAAOD,EAAMC,KACbC,EAAS,WAAWD,EAAKE,QAYzBC,EAXe,CAAC,UACtB,UACA,WAS2BC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAM,KAC3DH,EAAU,6BACVF,EAAKO,WACPJ,EAVkB,CAAC,UACvB,UACA,UACA,UACA,UACA,WAK0BC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAM,KAC5DH,EAAU,cAAC,IAAD,KAOZ,OACE,qBAAKM,UAAWP,EAAQQ,MAAO,CAACC,gBAAiBP,GAAQQ,QAAS,WALlD,IAACC,IAMHZ,EAAKY,GALnBC,QAAQC,IAAIF,IAIZ,SAGE,qBAAKJ,UAAU,cAAf,SACGN,MAOT,SAASa,EAAQhB,GAEf,OACE,qBAAKS,UAAU,WAAf,SAEET,EAAMiB,MAAMC,KAAI,SAACjB,EAAMkB,GACrB,OAAO,cAACpB,EAAD,CAAoBE,KAAMA,GAAf,MAAMkB,QAuBjBH,QCxDf,IAAMI,EAAgB,SAACC,GACrB,IAAIJ,EAAQ,GASZ,OARAK,IAAMD,GAAM,SAAAR,GACR,IARQU,EAQJC,GARID,EAQQ,IAPblB,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMiB,KASvCN,EAAMJ,GADJW,GAAM,GACI,CAAEX,GAAIA,EAAIL,UAAU,EAAML,QAAS,UAEnC,CAACU,GAAIA,EAAIL,UAAU,EAAOL,QAAS,YAG9Cc,GAiCMQ,MA9Bf,WAKE,IAJA,IACMC,EAAU,GACZC,EAAWP,EAAcQ,IAEvBD,EAASE,QAAQH,EAAQI,KAAKH,EAASI,OAAO,EAJpC,IAahB,OAPAT,IAAMI,EAAQG,QAAQ,SAAAG,GACpBV,IAAMI,EAAQM,GAAOH,QAAQ,SAAAI,GAC3BP,EAAQM,GAAOC,GAAQC,IAAMF,EAC7BN,EAAQM,GAAOC,GAAQE,OAASF,QAKlC,mCACA,qBAAKxB,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,2BAEA,qBAAKA,UAAU,YAAYC,MAAO,CAAC0B,WAAY,QAA/C,SACGV,EAAQR,KAAI,SAACD,EAAOE,GACnB,OAAO,cAAC,EAAD,CAASF,MAAOA,iBCnClBoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.548dca3b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport LocalFloristRounded from \"@material-ui/icons/LocalFloristRounded\";\r\n\r\nfunction Plot(props){\r\n  let plot = props.plot;\r\n  let classy = \"hexagon \"+plot.content;\r\n  let grassOptions = [\"#42796c\",\r\n\"#3a514c\",\r\n\"#185653\"]\r\n\r\n  let flowerOptions = [\"#9f1f2b\",\r\n\"#e88f00\",\r\n\"#e0c55f\",\r\n\"#7ddf84\",\r\n\"#00c0cd\",\r\n\"#9e7af0\"]\r\n\r\n  let color = grassOptions[Math.floor(Math.random() * Math.floor(3))]\r\n  let content = <></>\r\n  if (plot.isFlower){\r\n    color = flowerOptions[Math.floor(Math.random() * Math.floor(7))]\r\n    content = <LocalFloristRounded />;\r\n  }\r\n\r\n  let handleClick = (id) => {\r\n    console.log(id);\r\n  }\r\n\r\n  return (\r\n    <div className={classy} style={{backgroundColor: color}} onClick={()=>{\r\n      handleClick(plot.id);\r\n    }} >\r\n      <div className=\"hexagontent\">\r\n        {content}\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nfunction PlotRow(props){\r\n\r\n  return (\r\n    <div className=\"ibws-fix\">\r\n    {\r\n      props.plots.map((plot, i)=>{\r\n        return <Plot key={\"key\"+i} plot={plot} />\r\n      })\r\n    }\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction PlotGrid(rowSize, plots) {\r\n  // rowSize * rowSize should equal hexagons.length\r\n  // break hexagons into 2D grid\r\n  const plots2D = [];\r\n  while(plots.length) plots2D.push(plots.splice(0, rowSize));\r\n  return (\r\n    <div className=\"honeycomb\">\r\n      {plots2D.map((plots, i) => {\r\n        <div className=\"ibws-fix\">\r\n          <PlotRow plots={plots} />\r\n        </div>\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PlotRow;\r\n","import logo from './logo.svg';\r\nimport './App.css';\r\nimport HexagonGrid from 'react-hexagon-grid';\r\nimport times from 'lodash/times';\r\nimport LocalFloristRounded from \"@material-ui/icons/LocalFloristRounded\";\r\nimport PlotRow from './components/PlotGrid';\r\n\r\n// returns an integer between 0 and max\r\nfunction roll(max) {\r\n  return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n\r\n//returns a list of \"plot\" objects: {id, isFlower, name}\r\nconst generatePlots = (size) => {\r\n  let plots = [];\r\n  times(size, id => {\r\n      let dice = roll(100); // roll a 100 sided die\r\n      if (dice<=10){ // around a 10 percent chance of rolling a flower\r\n        plots[id] = { id: id, isFlower: true, content: \"flower\"};\r\n      } else {\r\n        plots[id] = {id: id, isFlower: false, content: \"grass\"};\r\n      }\r\n  });\r\n  return plots;\r\n}\r\n\r\nfunction App() {\r\n  const rowSize = 9;\r\n  const plots2D = [];\r\n  let hexagons = generatePlots(rowSize*(rowSize-1));\r\n\r\n  while(hexagons.length) plots2D.push(hexagons.splice(0, rowSize));\r\n\r\n  times(plots2D.length, index => {\r\n    times(plots2D[index].length, index2 => {\r\n      plots2D[index][index2].row = index;\r\n      plots2D[index][index2].column = index2;\r\n    });\r\n  });\r\n\r\n  return (\r\n    <>\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n      tiny collector\r\n      <div className=\"honeycomb\" style={{paddingTop: \"50px\"}}>\r\n        {plots2D.map((plots, i) => {\r\n          return <PlotRow plots={plots} />\r\n        })}\r\n      </div>\r\n      </header>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './hexagon.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}