{"version":3,"sources":["logo.svg","components/PlotGrid.js","App.js","reportWebVitals.js","index.js"],"names":["makeStyles","PlotRow","props","className","plots","map","plot","i","theClass","content","row","column","roll","max","Math","floor","random","generatePlots","size","times","id","dice","isFlower","HexGridDemo","gridWidth","gridHeight","hexagons","hexProps","hexagon","fillOptions","fill","length","style","stroke","onClick","alert","renderHexagonContent","App","plots2D","rowSize","push","splice","index","index2","justifyContent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAAe,I,gECEGA,YAAW,IAI7B,SAASC,EAAQC,GACf,OACE,qBAAKC,UAAU,WAAf,SAEED,EAAME,MAAMC,KAAI,SAACC,EAAMC,GACrB,IAAIC,EAAW,WAAWF,EAAKG,QAC/B,OACE,qBAAmBN,UAAWK,EAA9B,SACE,sBAAKL,UAAU,cAAf,UACE,4BAAIG,EAAKI,MACT,4BAAIJ,EAAKK,aAHH,MAAMJ,QA6BXN,QClCf,SAASW,EAAKC,GACZ,OAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,IAI/C,IAAMI,EAAgB,SAACC,GACrB,IAAId,EAAQ,GASZ,OARAe,IAAMD,GAAM,SAAAE,GACR,IAAIC,EAAOT,EAAK,KAEdR,EAAMgB,GADJC,GAAM,EACI,CAAED,GAAIA,EAAIE,UAAU,EAAMb,QAAS,UAEnC,CAACW,GAAIA,EAAIE,UAAU,EAAOb,QAAS,YAG9CL,GAIHmB,EAAc,WA0BlB,OACE,cAAC,IAAD,CACAC,UAAW,IACXC,WAAY,IACZC,SAAUT,EAAc,IACxBU,SA9BkB,SAACC,GACnB,IAAIC,EAAc,CAAC,UAAW,UAAW,UAAW,WAChDC,EAAOD,EAAYjB,EAAKiB,EAAYE,SAIxC,OAHIH,EAAQN,WACVQ,EAAO,WAEF,CACLE,MAAO,CACLF,KAAMA,EACNG,OAAQ,QAEVC,QAAS,kBAAMC,MAAM,aAAD,OAAcP,EAAQR,GAAtB,yBAoBtBgB,qBAhB2B,SAACR,GAC5B,OACE,mCACCA,EAAQN,UACP,cAAC,IAAD,UAsDOe,MArCf,WAKE,IAJA,IACMC,EAAU,GACZZ,EAAWT,EAAcsB,IAEvBb,EAASK,QAAQO,EAAQE,KAAKd,EAASe,OAAO,EAJpC,IAahB,OAPAtB,IAAMmB,EAAQP,QAAQ,SAAAW,GACpBvB,IAAMmB,EAAQI,GAAOX,QAAQ,SAAAY,GAC3BL,EAAQI,GAAOC,GAAQjC,IAAMgC,EAC7BJ,EAAQI,GAAOC,GAAQhC,OAASgC,QAKlC,mCACA,sBAAKxC,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACA,qBAAK6B,MAAO,CAACY,eAAgB,UAA7B,SACA,cAAC,EAAD,MAEE,kDAIF,qBAAKzC,UAAU,YAAf,SACGmC,EAAQjC,KAAI,SAACD,EAAOG,GACnB,OACI,cAAC,EAAD,CAASH,MAAOA,eChFfyC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f180d8bf.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n\r\n});\r\n\r\nfunction PlotRow(props){\r\n  return (\r\n    <div className=\"ibws-fix\">\r\n    {\r\n      props.plots.map((plot, i)=>{\r\n        let theClass = \"hexagon \"+plot.content;\r\n        return (\r\n          <div key={\"key\"+i} className={theClass} >\r\n            <div className=\"hexagontent\">\r\n              <p>{plot.row}</p>\r\n              <p>{plot.column}</p>\r\n            </div>\r\n          </div>\r\n        )\r\n      })\r\n    }\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction PlotGrid(rowSize, plots) {\r\n  // rowSize * rowSize should equal hexagons.length\r\n  // break hexagons into 2D grid\r\n  const plots2D = [];\r\n  while(plots.length) plots2D.push(plots.splice(0, rowSize));\r\n  return (\r\n    <div className=\"honeycomb\">\r\n      {plots2D.map((plots, i) => {\r\n        <div className=\"ibws-fix\">\r\n          <PlotRow plots={plots} />\r\n        </div>\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PlotRow;\r\n","import logo from './logo.svg';\r\nimport './App.css';\r\nimport HexagonGrid from 'react-hexagon-grid';\r\nimport times from 'lodash/times';\r\nimport LocalFloristRounded from \"@material-ui/icons/LocalFloristRounded\";\r\nimport PlotRow from './components/PlotGrid';\r\n\r\n// returns an integer between 0 and max\r\nfunction roll(max) {\r\n  return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n\r\n//returns a list of \"plot\" objects: {id, isFlower, name}\r\nconst generatePlots = (size) => {\r\n  let plots = [];\r\n  times(size, id => {\r\n      let dice = roll(100); // roll a 100 sided die\r\n      if (dice<=5){ // around a 3 percent chance of rolling a flower\r\n        plots[id] = { id: id, isFlower: true, content: \"flower\"};\r\n      } else {\r\n        plots[id] = {id: id, isFlower: false, content: \"grass\"};\r\n      }\r\n  });\r\n  return plots;\r\n}\r\n\r\n\r\nconst HexGridDemo = () =>  {\r\n  const getHexProps = (hexagon) => {\r\n    let fillOptions = [\"#86d9b2\", \"#79c98c\", \"#a4dec6\", \"#abd69c\"]\r\n    let fill = fillOptions[roll(fillOptions.length)];\r\n    if (hexagon.isFlower){\r\n      fill = \"#bf5e69\";\r\n    }\r\n    return {\r\n      style: {\r\n        fill: fill,\r\n        stroke: 'none'\r\n      },\r\n      onClick: () => alert(`Hexagon n.${hexagon.id} has been clicked`)\r\n    };\r\n  }\r\n\r\n  const renderHexagonContent = (hexagon) => {\r\n    return (\r\n      <>\r\n      {hexagon.isFlower &&\r\n        <LocalFloristRounded/>\r\n      }\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <HexagonGrid\r\n    gridWidth={600}\r\n    gridHeight={600}\r\n    hexagons={generatePlots(64)}\r\n    hexProps={getHexProps}\r\n    renderHexagonContent={renderHexagonContent}\r\n    />\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  const rowSize = 8;\r\n  const plots2D = [];\r\n  let hexagons = generatePlots(rowSize*(rowSize-1));\r\n\r\n  while(hexagons.length) plots2D.push(hexagons.splice(0, rowSize));\r\n\r\n  times(plots2D.length, index => {\r\n    times(plots2D[index].length, index2 => {\r\n      plots2D[index][index2].row = index;\r\n      plots2D[index][index2].column = index2; \r\n    });\r\n  });\r\n\r\n  return (\r\n    <>\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n      <div style={{justifyContent: \"center\"}}>\r\n      <HexGridDemo />\r\n      </div>\r\n        <p>\r\n          TINY COLLECTOR\r\n        </p>\r\n      </header>\r\n      <div className=\"honeycomb\">\r\n        {plots2D.map((plots, i) => {\r\n          return (\r\n              <PlotRow plots={plots} />\r\n          )\r\n        })}\r\n      </div>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './hexagon.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}