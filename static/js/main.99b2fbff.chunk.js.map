{"version":3,"sources":["components/OptionsDialog.js","components/PlotGrid/Plot.js","constants/colors.js","config/gameConfig.js","utils/dice.js","components/PlotGrid/PlotRow.js","components/Inventory/index.js","App.js","index.js"],"names":["useStyles","makeStyles","red","backgroundColor","color","blue","OptionsDialog","props","onClose","title","selectedValue","selectedPlot","open","handleClose","handleListItemClick","value","classes","Dialog","aria-labelledby","maxWidth","DialogTitle","id","List","ListItem","button","onClick","ListItemAvatar","Avatar","className","ListItemText","primary","DialogActions","Button","Plot","plot","performGather","handleClick","classy","content","isFlower","age","flowerHex","budColor","plotTitle","flowerColorName","tooltipContent","style","fontSize","row","col","plotStyle","useState","setOpen","setSelectedValue","Tooltip","arrow","selectedAction","grassColors","colorData","colorName","colorHex","gameConfig","rollUpTo","max","Math","floor","random","generateDeadPlot","x","y","colorID","length","name","generateFlower","flowerColorId","PlotRow","plots","gridState","gridStateSetter","inventoryState","inventoryStateSetter","thePlot","filter","console","log","slotInInventory","findIndex","item","flowerColor","quantity","newSlot","map","i","Inventory","data","flowerHues","items","setItems","createMuiTheme","palette","main","theme","root","flexGrow","paper","height","width","StyledBadge","withStyles","badge","top","right","border","background","padding","Badge","Wrapper","children","condition","wrapper","Container","paddingTop","Grid","container","spacing","xs","justify","index","badgeContent","component","Paper","elevation","variant","App","rowSize","size","plots2D","times","ageRoll","push","splice","r","c","generatePlots","plotGrid","setPlotGrid","trueTime","setTrueTime","inventory","setInventory","displayTime","findEmptyNeighbors","neighbors","findNeighbors","empties","step","marked","deathList","pick","plantFlower","killFlower","timeOfDay","borderRadius","ThemeProvider","Fab","margin","plotRow","ReactDOM","render","Helmet","document","getElementById"],"mappings":"iaAqBMA,EAAYC,YAAW,CAC3BC,IAAK,CACHC,gBAAiBD,IAAI,KACrBE,MAAOF,IAAI,MAEbG,KAAM,CACJF,gBAAiBE,IAAK,KACtBD,MAAOC,IAAK,QAkDDC,EA9CO,SAAAC,GAAU,IAExBC,EAAsDD,EAAtDC,QAASC,EAA6CF,EAA7CE,MAAOC,EAAsCH,EAAtCG,cAAeC,EAAuBJ,EAAvBI,aAAcC,EAASL,EAATK,KAG7CC,EAAc,WAClBL,EAAQE,IAGJI,EAAsB,SAACC,GAC3BP,EAAQO,EAAOJ,IAGbK,EAAUhB,IAGd,OACE,eAACiB,EAAA,EAAD,CAAQT,QAASK,EAAaK,kBAAgB,sBAAsBN,KAAMA,EAAMO,UAAU,EAA1F,UACI,cAACC,EAAA,EAAD,CAAaC,GAAG,sBAAhB,SAAuCZ,IACvC,eAACa,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAUC,QAAM,EAACC,QAAS,kBAAMX,EAAoB,WAApD,UACE,cAACY,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAQC,UAAWZ,EAAQX,KAA3B,SACE,cAAC,IAAD,QAGJ,cAACwB,EAAA,EAAD,CAAcC,QAAQ,cAGxB,eAACP,EAAA,EAAD,CAAUC,QAAM,EAACC,QAAS,kBAAMX,EAAoB,WAApD,UACE,cAACY,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAQC,UAAWZ,EAAQd,IAA3B,SACE,cAAC,IAAD,QAGJ,cAAC2B,EAAA,EAAD,CAAcC,QAAQ,iBAG1B,cAACC,EAAA,EAAD,UACC,cAACC,EAAA,EAAD,CAAQP,QAASZ,EAAaT,MAAM,UAApC,SACC,cAAC,IAAD,YCTK6B,EArDF,SAAA1B,GAAU,IACf2B,EAAqC3B,EAArC2B,KAAmBC,GAAkB5B,EAA/B6B,YAA+B7B,EAAlB4B,eACrBE,EAAS,WAAWH,EAAKI,QACzBA,EAAU,GACVlC,EAAQ,GAER8B,EAAKK,UAAYL,EAAKM,KAAM,IAC9BpC,EAAQ8B,EAAKO,UACbH,EAAU,cAAC,IAAD,KAERJ,EAAKK,UAAYL,EAAKM,IAAM,IAC9BpC,EAAQ8B,EAAKQ,SACbJ,EAAU,cAAC,IAAD,KAGPJ,EAAKK,WACRnC,EAAQ8B,EAAK9B,OAGf,IAAIuC,EAAYT,EAAKK,SAAWL,EAAKU,gBAAkB,UAAY,aAC/DC,EAAiB,qCAAE,4BAAIF,IAAc,oBAAGG,MAAO,CAACC,SAAU,IAArB,UAA2Bb,EAAKc,IAAhC,KAAuCd,EAAKe,UACjFC,EAAY,CAAE/C,gBAAiBC,GArBf,EAwBI+C,oBAAS,GAxBb,mBAwBbvC,EAxBa,KAwBPwC,EAxBO,OAyBsBD,mBAAS,UAzB/B,mBAyBbzC,EAzBa,KAyBE2C,EAzBF,KAkCpB,OACE,qCACA,cAACC,EAAA,EAAD,CAAS7C,MAAOoC,EAAgBU,OAAK,EAArC,SACA,qBAAK3B,UAAWS,EAAQS,MAAOI,EAAWzB,QAAS,WAC3CS,EAAKK,UAAYL,EAAKM,KAAM,GAAGL,EAAcD,IADrD,SAGE,qBAAKN,UAAU,cAAf,SACGU,QAIHJ,EAAKK,UAAYL,EAAKM,KACtB,cAAC,EAAD,CAAehC,QAlBL,SAACgD,EAAgBtB,GAC/BkB,GAAQ,GACRC,EAAiBG,GACI,WAAjBA,GAA2BrB,EAAcD,IAeRzB,MAAOkC,EAAW/B,KAAMA,EAAMF,cAAeA,EAAeC,aAAcuB,QCxDpGuB,EAAc,CACzB,UACA,UACA,WAmCWC,EAAY,CACvB,CACErC,GAAI,EACJsC,UAAW,MACXC,SAAU,WAEZ,CACEvC,GAAI,EACJsC,UAAW,SACXC,SAAU,WAEZ,CACIvC,GAAI,EACJsC,UAAW,QACXC,SAAU,WAEd,CACIvC,GAAI,EACJsC,UAAW,OACXC,SAAU,WAEd,CACIvC,GAAI,EACJsC,UAAW,OACXC,SAAU,WAEd,CACIvC,GAAI,EACJsC,UAAW,SACXC,SAAU,YCnEHC,EACJ,iBADIA,EAEF,GAFEA,EAGA,EAHAA,GAIQ,ECARC,EAAW,SAACC,GAEvB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,KAMlCI,EAAmB,SAAC,GAAiC,IAAD,IAA/BC,SAA+B,OAA5B,EAA4B,MAAzBC,SAAyB,OAAtB,EAAsB,EAAnBC,EAAmB,EAAnBA,QAAmB,IAAVjD,UAAU,OAAN,EAAM,EAG/D,OAFKiD,IAASA,EAAUR,EAASL,EAAYc,SAEtC,CACLlD,GAAIA,EACJkB,UAAU,EACVnC,MAAOqD,EAAYa,GACnBE,KAAM,QACNlC,QAAS,QACTU,IAAKoB,EACLnB,IAAKoB,IAKII,EAAiB,SAAC,GAA2C,IAAD,IAAzCL,SAAyC,OAAtC,EAAsC,MAAnCC,SAAmC,OAAhC,EAAgC,EAA7BC,EAA6B,EAA7BA,QAA6B,IAApB9B,WAAoB,MAAd,EAAc,MAAXnB,UAAW,OAAP,EAAO,EAIvE,OAFKiD,IAASA,EAASR,EAAS,IAEzB,CACLd,IAAKoB,EACLnB,IAAKoB,EACLhD,GAAIA,EACJqB,SAAUe,EAAYK,EAASL,EAAYc,SAC3ChC,UAAU,EACVE,UAAWiB,EAAUY,GAASV,SAC9BhB,gBAAiBc,EAAUY,GAASX,UACpCe,cAAeJ,EACfE,KAAMd,EAAUY,GAASX,UAAW,UACpCnB,IAAKA,ICsBMmC,EAzDC,SAAApE,GAAU,IAGtBqE,EAKErE,EALFqE,MACAC,EAIEtE,EAJFsE,UACAC,EAGEvE,EAHFuE,gBACAC,EAEExE,EAFFwE,eACAC,EACEzE,EADFyE,qBAGI5C,EAAc,SAACf,GACnB,IAAI4D,EAAUL,EAAMM,QAAO,SAAChD,GAAU,OAAOA,EAAKb,KAAOA,KAAK,GAC9D8D,QAAQC,IAAIH,IAGR9C,EAAgB,SAACD,GACrB,IAAIb,EAAKa,EAAKb,GAEVgE,EAAkBN,EAAeO,WAAU,SAACC,GAAD,OAAUA,EAAKC,cAAgBtD,EAAKwC,iBACnF,GAAIW,GAAmB,EACrBN,EAAeM,GAAiBI,WAChCT,EAAqB,YAAID,QACxB,CACH,IAAIW,EAAU,CACVF,YAAatD,EAAKwC,cAClBf,UAAWzB,EAAKU,gBAChB6C,SAAU,GAEdT,EAAqB,GAAD,mBAAKD,GAAL,CAAqBW,KAEzC,IAAItF,EAAQqD,EAAYK,EAASL,EAAYc,SAC7CM,EAAU3C,EAAKc,KAAKd,EAAKe,KAAO,CAC9B5B,GAAIA,EACJkB,UAAU,EACVnC,MAAOA,EACPoE,KAAM,QACNlC,QAAS,QACTU,IAAKd,EAAKc,IACVC,IAAKf,EAAKe,KAEZ6B,EAAgB,YAAID,KAOtB,OACE,qBAAKjD,UAAU,WAAf,SAEEgD,EAAMe,KAAI,SAACzD,EAAM0D,GACf,OAAO,cAAC,EAAD,CAAoB1D,KAAMA,EAAME,YAAaA,EAAaD,cAAeA,GAA9D,MAAMyD,S,mDC0BfC,EAzEG,SAAEC,GAAU,IAEtBC,EAAgCD,EAAhCC,WAAYC,EAAoBF,EAApBE,MAAoBF,EAAbG,SAEVC,YAAe,CAC3BC,QAAS,CACPrE,QAAS,CACPsE,KAAM,cAKZjB,QAAQC,IAAIY,GACZ,IAAMhG,EAAYC,aAAW,SAACoG,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,MAAO,CACLC,OAAQ,GACRC,MAAO,QAILC,EAAcC,aAAW,SAACP,GAAD,MAAY,CAC7CQ,MAAO,CACLC,IAAK,GACLC,MAAO,EACPC,OAAO,aAAD,OAAeX,EAAMF,QAAQc,WAAWT,OAC9CU,QAAS,YALWN,CAOpBO,KAEKnG,EAAUhB,IAOVoH,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,QAAxB,OACpBD,EAAYC,EAAQF,GAAYA,GAE5B,OACE,cAACG,EAAA,EAAD,CAAWrG,SAAS,KAAK2B,MAAO,CAAE2E,WAAY,OAA9C,SACE,cAACC,EAAA,EAAD,CAAMC,WAAS,EAAC/F,UAAWZ,EAAQsF,KAAMsB,QAAS,EAAlD,SACE,cAACF,EAAA,EAAD,CAAMnC,MAAI,EAACsC,GAAI,GAAf,SACG,cAACH,EAAA,EAAD,CAAMC,WAAS,EAACG,QAAQ,SAASF,QAAS,EAA1C,SACG5B,EAAML,KAAI,SAAC5E,EAAOgH,GACjB,OACA,cAACL,EAAA,EAAD,CAAkBnC,MAAI,EAAtB,SACA,cAAC6B,EAAD,CACGE,UAAYvG,EAAM0E,SAAU,EAC5B8B,QAAS,SAAAF,GAAQ,OACb,cAACV,EAAD,CACAvG,MAAM,UACN4H,aAAcjH,EAAM0E,SAFpB,SAGE4B,KANT,SASI,cAAC1F,EAAA,EAAD,CAAQsG,UAAWC,IAAOpF,MAAO,CAAC3C,gBAAiB4F,EAAWhF,EAAMyE,aAAcpF,MAAO,SAAS+H,UAAW,EAAGC,QAAQ,UAAxH,SACI,cAAC,IAAD,SAXGL,e,iDCxCxBhC,GAAalC,ELSqB,CACpC,SACA,UACA,UACA,UACA,UACA,WApB0B,CAC1B,UACA,UACA,UACA,UACA,UACA,WK+BIwC,GAAQH,YAAe,CAC3BC,QAAS,CACPrE,QAAS,CACPsE,KAAM,cA8KGiC,OAtKf,WACE,IAAMC,EAAUzE,EACVpD,EAAQoD,EAFD,EAImBV,mBA5CZ,SAACoF,GACrB,IAAI3D,EAAQ,GACR4D,EAAU,GAad,IAXAC,IAAMF,GAAM,SAAAlH,GAER,GADWyC,EAAS,MACVD,EAAqB,CAC7B,IAAI6E,EAAU5E,EAAS,GACvBc,EAAMvD,GAAMoD,EAAe,CAACjC,IAAKkG,EAASrH,GAAIA,SAE9CuD,EAAMvD,GAAM8C,EAAiB,CAAC9C,GAAIA,OAKlCuD,EAAML,QAAQiE,EAAQG,KAAK/D,EAAMgE,OAAO,EAAG/E,IAWjD,OAPA4E,IAAMD,EAAQjE,QAAQ,SAAAsE,GACpBJ,IAAMD,EAAQK,GAAGtE,QAAQ,SAAAuE,GACvBN,EAAQK,GAAGC,GAAG9F,IAAM6F,EACpBL,EAAQK,GAAGC,GAAG7F,IAAM6F,QAIjBN,EAkBkCO,CAAcT,GAASA,EAAQ,KAJ3D,mBAINU,EAJM,KAIIC,EAJJ,OAKmB9F,mBAAS,GAL5B,mBAKN+F,EALM,KAKIC,EALJ,OAMqBhG,mBAAS,IAN9B,mBAMNiG,EANM,KAMKC,EANL,KAUPC,EAAc,EAAEtF,KAAKC,MAAMiF,EAAS,GAiCpCK,EAAqB,SAACnF,EAAIC,GAC9B,IAAImF,EAhCgB,SAACpF,EAAIC,GAoBzB,IAAImF,EAAY,GAQhB,OAPIpF,EAAI,GAAIoF,EAAUb,KAAK,CAAC3F,IAAKoB,EAAE,EAAGnB,IAAKoB,IACvCA,EAAIR,EAAmB,GAAG2F,EAAUb,KAAK,CAAC3F,IAAKoB,EAAGnB,IAAKoB,EAAE,IACzDA,EAAIR,EAAmB,GAAG2F,EAAUb,KAAK,CAAC3F,IAAKoB,EAAGnB,IAAKoB,EAAE,IACzDD,EAAIP,EAAmB,GAAG2F,EAAUb,KAAK,CAAC3F,IAAKoB,EAAE,EAAGnB,IAAKoB,IACzDD,EAAIP,EAAmB,GAAKQ,EAAI,GAAImF,EAAUb,KAAK,CAAC3F,IAAKoB,EAAE,EAAGnB,IAAKoB,EAAE,IACrED,EAAI,GAAKC,EAAI,GAAGmF,EAAUb,KAAK,CAAC3F,IAAKoB,EAAE,EAAGnB,IAAKoB,IAE5CmF,EAISC,CAAcrF,EAAGC,GAC7BqF,EAAU,GAMd,OALAjB,IAAMe,EAAUjF,QAAQ,SAACqB,GAClBoD,EAASQ,EAAU5D,GAAG5C,KAAKwG,EAAU5D,GAAG3C,KAAKV,UAChDmH,EAAQf,KAAKK,EAASQ,EAAU5D,GAAG5C,KAAKwG,EAAU5D,GAAG3C,SAGlDyG,GAeHC,EAAO,WAEXR,EAAYD,EAAW,GAGvBT,IAAMO,EAASzE,QAAQ,SAAAvB,GACrByF,IAAMO,EAAShG,GAAKuB,QAAQ,SAAAtB,GAC1B+F,EAAShG,GAAKC,GAAK2G,QAAS,QAQhC,IAAIC,EAAY,GAGhBpB,IAAMO,EAASzE,QAAQ,SAAAvB,GACrByF,IAAMO,EAAShG,GAAKuB,QAAQ,SAAAtB,GAC1B,IAAK+F,EAAShG,GAAKC,GAAK2G,SACtBZ,EAAShG,GAAKC,GAAK2G,QAAS,EAIxBZ,EAAShG,GAAKC,GAAKT,IAAM,IAAM0G,EAAW,IAAM,GAAKA,EAAW,IAAM,IACxEF,EAAShG,GAAKC,GAAKT,MAGjBwG,EAAShG,GAAKC,GAAKV,UAAqC,IAAzByG,EAAShG,GAAKC,GAAKT,KAAQ,CAC5D,IAAIkH,EAAUH,EAAmBvG,EAAKC,GACtC,GAAIyG,EAAQnF,OAAO,CACjB,IAAIuF,EAAOJ,EAAQ5F,EAAS4F,EAAQnF,SAChCuF,GA7CI,SAAC1F,EAAGC,GACpB,IAAIhD,EAAK2H,EAAS5E,GAAGC,GAAGhD,GACxB2H,EAAS5E,GAAGC,GAAKI,EAAe,CAACL,IAAGC,IAAGhD,OACvC4H,EAAY,YAAID,IA0CEe,CAAYD,EAAK9G,IAAK8G,EAAK7G,SAChC,CAEMa,EAAS,IACT+F,EAAUlB,KAAK,CAAC3F,MAAKC,gBAS1CwF,IAAMoB,EAAUtF,QAAQ,SAAAqB,IApDL,SAACxB,EAAGC,GACrB,IAAIhD,EAAK2H,EAAS5E,GAAGC,GAAGhD,GACxB2H,EAAS5E,GAAGC,GAAKF,EAAiB,CAACC,IAAGC,IAAGhD,OACzC4H,EAAY,YAAID,IAkDhBgB,CAAWH,EAAUjE,GAAG5C,IAAK6G,EAAUjE,GAAG3C,SAO1CgH,EAAY,GAOhB,OAJKf,EAAW,IAAM,EAAKe,EAAY,cAAC,KAAD,CAAW1B,KAAM,GAAIzF,MAAO,CAAC3C,gBAAiB,UAAW+G,QAAS,UAAWgD,aAAc,OAAQlD,OAAQ,qBACxIkC,EAAW,IAAM,EAAMe,EAAY,cAAC,KAAD,CAAY1B,KAAM,GAAIzF,MAAO,CAAC3C,gBAAiB,UAAW+G,QAAS,UAAWgD,aAAc,OAAQlD,OAAQ,qBAC/IkC,EAAW,IAAM,IAAMe,EAAY,cAAC,KAAD,CAAwB1B,KAAM,GAAIzF,MAAO,CAAC3C,gBAAiB,UAAW+G,QAAS,UAAWgD,aAAc,OAAQlD,OAAQ,sBAGnK,cAACmD,GAAA,EAAD,CAAe9D,MAAOA,GAAtB,SACA,qBAAKzE,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACCnB,EACA,cAAC2J,GAAA,EAAD,CAAKhC,QAAQ,WAAWhI,MAAM,UAAUqB,QAAS,WAC7CkI,KACC7G,MAAO,CACRuH,OAAQ,OAHZ,SAKE,cAAC,KAAD,MAEF,4BAAIJ,IACJ,kCAAK,OAAOX,EAAZ,OACD,cAAC,EAAD,CAAWvD,WAAYA,GAAYC,MAAOoD,EAAWnD,SAAUoD,IAU/D,qBAAKzH,UAAU,YAAYkB,MAAO,CAAC2E,WAAY,OAA/C,SACGuB,EAASrD,KAAI,SAAC2E,EAAS1E,GACtB,OAAO,cAAC,EAAD,CACLhB,MAAO0F,EACPzF,UAAWmE,EAAUlE,gBAAiBmE,EACtClE,eAAgBqE,EAAWpE,qBAAsBqE,iB,SCjN7DkB,IAASC,OAEL,qCACA,cAACC,GAAA,EAAD,UACE,gCAAQ,qBAEV,cAAC,GAAD,OAGFC,SAASC,eAAe,U","file":"static/js/main.99b2fbff.chunk.js","sourcesContent":["import CancelIcon from '@material-ui/icons/Cancel';\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Button from '@material-ui/core/Button';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport LibraryAddIcon from '@material-ui/icons/LibraryAdd';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { useState } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { red, blue } from '@material-ui/core/colors';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  red: {\r\n    backgroundColor: red[100],\r\n    color: red[600],\r\n  },\r\n  blue: {\r\n    backgroundColor: blue[100],\r\n    color: blue[600]\r\n  }\r\n});\r\n\r\nconst OptionsDialog = props => {\r\n\r\n  let { onClose, title, selectedValue, selectedPlot, open } = props;\r\n\r\n\r\n  const handleClose = () => {\r\n    onClose(selectedValue);\r\n  };\r\n\r\n  const handleListItemClick = (value) => {\r\n    onClose(value, selectedPlot);\r\n  };\r\n\r\n  let classes = useStyles();\r\n\r\n\r\n  return (\r\n    <Dialog onClose={handleClose} aria-labelledby=\"simple-dialog-title\" open={open} maxWidth={true}>\r\n        <DialogTitle id=\"simple-dialog-title\">{title}</DialogTitle>\r\n        <List>\r\n          <ListItem button onClick={() => handleListItemClick('gather')}>\r\n            <ListItemAvatar>\r\n              <Avatar className={classes.blue}>\r\n                <LibraryAddIcon />\r\n              </Avatar>\r\n            </ListItemAvatar>\r\n            <ListItemText primary=\"Gather\" />\r\n          </ListItem>\r\n\r\n          <ListItem button onClick={() => handleListItemClick('delete')}>\r\n            <ListItemAvatar>\r\n              <Avatar className={classes.red}>\r\n                <DeleteForeverIcon />\r\n              </Avatar>\r\n            </ListItemAvatar>\r\n            <ListItemText primary=\"Delete\" />\r\n          </ListItem>\r\n        </List>\r\n        <DialogActions>\r\n         <Button onClick={handleClose} color=\"primary\">\r\n          <CancelIcon />\r\n         </Button>\r\n       </DialogActions>\r\n      </Dialog>\r\n  )\r\n}\r\nexport default OptionsDialog;\r\n","import LocalFlorist from \"@material-ui/icons/LocalFlorist\";\r\nimport SpaIcon from '@material-ui/icons/Spa';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { useState } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport OptionsDialog from \"./../OptionsDialog\";\r\n\r\nconst Plot = props => {\r\n  let { plot, handleClick, performGather } = props;\r\n  let classy = \"hexagon \"+plot.content;\r\n  let content = \"\";\r\n  let color = \"\"\r\n\r\n  if (plot.isFlower && plot.age >=1 ) {\r\n    color = plot.flowerHex;\r\n    content = <LocalFlorist />\r\n  };\r\n  if (plot.isFlower && plot.age < 1 ){\r\n    color = plot.budColor;\r\n    content = <SpaIcon />;\r\n  }\r\n\r\n  if (!plot.isFlower){\r\n    color = plot.color;\r\n  }\r\n\r\n  let plotTitle = plot.isFlower ? plot.flowerColorName + \" Flower\" : \"Empty Plot\";\r\n  let tooltipContent = <><p>{plotTitle}</p><p style={{fontSize: 14}}>{plot.row}, {plot.col}</p></>;\r\n  let plotStyle = { backgroundColor: color };\r\n\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [selectedValue, setSelectedValue] = useState(\"delete\");\r\n\r\n\r\nconst onClose = (selectedAction, plot) => {\r\n  setOpen(false);\r\n  setSelectedValue(selectedAction);\r\n  if (selectedAction===\"gather\") performGather(plot);\r\n};\r\n\r\n  return (\r\n    <>\r\n    <Tooltip title={tooltipContent} arrow>\r\n    <div className={classy} style={plotStyle} onClick={()=>{\r\n        if (plot.isFlower && plot.age >=1) performGather(plot)\r\n    }} >\r\n      <div className=\"hexagontent\">\r\n        {content}\r\n      </div>\r\n    </div>\r\n    </Tooltip>\r\n    { plot.isFlower && plot.age &&\r\n      <OptionsDialog onClose={onClose} title={plotTitle} open={open} selectedValue={selectedValue} selectedPlot={plot} />\r\n    }\r\n\r\n      </>\r\n  )\r\n\r\n}\r\nexport default Plot;\r\n","export const grassColors = [\r\n  \"#42796c\",\r\n  \"#3a514c\",\r\n  \"#185653\"\r\n]\r\n\r\nexport const colorNames = [\r\n  \"Red\",\r\n  \"Yellow\",\r\n  \"Green\",\r\n  \"Cyan\",\r\n  \"Blue\",\r\n  \"Violet\"\r\n]\r\nexport const flowerColors = [\r\n  \"#9f1f2b\", //red\r\n  \"#e0c55f\", //yellow\r\n  \"#7ddf84\", //green\r\n  \"#00c0cd\", //cyan\r\n  \"#3b66db\", //blue\r\n  \"#9e7af0\" //violet\r\n]\r\n\r\n/*\r\ntaken from here:\r\nhttps://personal.sron.nl/~pault/\r\n*/\r\n\r\nexport const flowerColorsAccessible = [\r\n  \"#e6677\", //red\r\n  \"#ccbb44\", //yellow\r\n  \"#228833\", //green\r\n  \"#66ccee\", //cyan\r\n  \"#4477aa\", //blue\r\n  \"#aa3377\" //violet\r\n]\r\n\r\n// TODO: finish and implement this data.\r\nexport const colorData = [\r\n  {\r\n    id: 0,\r\n    colorName: \"Red\",\r\n    colorHex: \"#9f1f2b\"\r\n  },\r\n  {\r\n    id: 1,\r\n    colorName: \"Yellow\",\r\n    colorHex: \"#e0c55f\"\r\n  },\r\n  {\r\n      id: 2,\r\n      colorName: \"Green\",\r\n      colorHex: \"#7ddf84\"\r\n  },\r\n  {\r\n      id: 3,\r\n      colorName: \"Cyan\",\r\n      colorHex: \"#00c0cd\",\r\n  },\r\n  {\r\n      id: 4,\r\n      colorName: \"Blue\",\r\n      colorHex: \"#3b66db\"\r\n  },\r\n  {\r\n      id: 5,\r\n      colorName: \"Violet\",\r\n      colorHex: \"#9e7af0\"\r\n  }\r\n\r\n]\r\n","export const gameConfig = {\r\n  title: \"tiny collector\",\r\n  rowSize: 10, // number of plots per row\r\n  fertility: 3, // 1...100, initial flower spawn rate\r\n  accessibilityMode: false\r\n}\r\n","import { grassColors, colorData } from './../constants/colors';\r\nimport { gameConfig } from './../config/gameConfig';\r\n\r\n\r\nexport const rollUpTo = (max) => {\r\n  // Zero inclusive - max of 6 returns an integer 0-5\r\n  return Math.floor(Math.random() * Math.floor(max));\r\n}\r\nexport const getRandomGrassHue = () => {\r\n  // returns a color from the appropriate grass array\r\n}\r\n\r\nexport const generateDeadPlot = ({x=-1, y=-1, colorID, id=-1}) =>{\r\n  if (!colorID) colorID = rollUpTo(grassColors.length);\r\n  // returns a piece of plot data complete with a generated color.\r\n  return {\r\n    id: id,\r\n    isFlower: false,\r\n    color: grassColors[colorID],\r\n    name: \"Empty\",\r\n    content: \"grass\",\r\n    row: x,\r\n    col: y\r\n  };\r\n}\r\n\r\n\r\nexport const generateFlower = ({x=-1, y=-1, colorID, age = 0, id=-1}) => {\r\n  // all parameters optional\r\n  if (!colorID) colorID= rollUpTo(6);\r\n\r\n  return {\r\n    row: x,\r\n    col: y,\r\n    id: id,\r\n    budColor: grassColors[rollUpTo(grassColors.length)],\r\n    isFlower: true,\r\n    flowerHex: colorData[colorID].colorHex,\r\n    flowerColorName: colorData[colorID].colorName,\r\n    flowerColorId: colorID,\r\n    name: colorData[colorID].colorName+ \" Flower\",\r\n    age: age\r\n  }\r\n}\r\n","import { useState } from \"react\";\r\nimport Plot from \"./Plot\";\r\nimport { rollUpTo } from './../../utils/dice';\r\nimport { grassColors, flowerColors, flowerColorsAccessible, colorNames } from './../../constants/colors';\r\n\r\n\r\nconst PlotRow = props => {\r\n\r\n  const {\r\n    plots,\r\n    gridState,\r\n    gridStateSetter,\r\n    inventoryState,\r\n    inventoryStateSetter\r\n  } = props;\r\n\r\n  const handleClick = (id) => {\r\n    let thePlot = plots.filter((plot) => {return plot.id === id})[0];\r\n    console.log(thePlot);\r\n  }\r\n\r\n  const performGather = (plot) =>{\r\n    let id = plot.id;\r\n\r\n    let slotInInventory = inventoryState.findIndex((item) => item.flowerColor === plot.flowerColorId);\r\n    if (slotInInventory > -1) {\r\n      inventoryState[slotInInventory].quantity ++;\r\n      inventoryStateSetter([...inventoryState]);\r\n} else {\r\n    let newSlot = {\r\n        flowerColor: plot.flowerColorId,\r\n        colorName: plot.flowerColorName,\r\n        quantity: 1\r\n    }\r\n    inventoryStateSetter([...inventoryState, newSlot]);\r\n}\r\n    let color = grassColors[rollUpTo(grassColors.length)];\r\n    gridState[plot.row][plot.col] = {\r\n      id: id,\r\n      isFlower: false,\r\n      color: color,\r\n      name: \"Empty\",\r\n      content: \"grass\",\r\n      row: plot.row,\r\n      col: plot.col\r\n    };\r\n    gridStateSetter([...gridState]);\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n  return (\r\n    <div className=\"ibws-fix\">\r\n    {\r\n      plots.map((plot, i)=>{\r\n        return <Plot key={\"key\"+i} plot={plot} handleClick={handleClick} performGather={performGather} />\r\n      })\r\n    }\r\n    </div>\r\n  )\r\n}\r\nexport default PlotRow;\r\n","import LocalFlorist from \"@material-ui/icons/LocalFlorist\";\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Container from '@material-ui/core/Container';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Badge from '@material-ui/core/Badge';\r\n\r\nimport { makeStyles, createMuiTheme, withStyles } from '@material-ui/core/styles';\r\n\r\n\r\n  const Inventory = ( data ) =>{\r\n\r\n    let { flowerHues, items, setItems } = data;\r\n\r\n     const theme = createMuiTheme({\r\n       palette: {\r\n         primary: {\r\n           main: \"#185653\"\r\n         },\r\n       },\r\n     });\r\n\r\n     console.log(items);\r\n     const useStyles = makeStyles((theme) => ({\r\n       root: {\r\n         flexGrow: 1\r\n       },\r\n       paper: {\r\n         height: 50,\r\n         width: 50\r\n       }\r\n     }));\r\n\r\n     const StyledBadge = withStyles((theme) => ({\r\n   badge: {\r\n     top: 35,\r\n     right: 5,\r\n     border: `2px solid ${theme.palette.background.paper}`,\r\n     padding: '0 4px',\r\n   },\r\n }))(Badge);\r\n\r\n    const classes = useStyles();\r\n\r\n\r\n    //The purpose of the Wrapper function is to ensure that\r\n    // the element is only wrapped if the condition is met.\r\n    // We only want the quantity badge to appear if the\r\n    // quantity is greater than 1.\r\n    const Wrapper = ({ children, condition, wrapper }) =>\r\ncondition ? wrapper(children) : children;\r\n\r\n    return (\r\n      <Container maxWidth=\"sm\" style={{ paddingTop: \"1em\"}}>\r\n        <Grid container className={classes.root} spacing={2}>\r\n          <Grid item xs={12}>\r\n             <Grid container justify=\"center\" spacing={1}>\r\n               {items.map((value, index) => {\r\n                 return(\r\n                 <Grid key={index} item>\r\n                 <Wrapper\r\n                    condition={ value.quantity >1 }\r\n                    wrapper={children =>\r\n                        <StyledBadge\r\n                        color=\"primary\"\r\n                        badgeContent={value.quantity}\r\n                        >{children}\r\n                        </StyledBadge>\r\n                    }>\r\n                     <Avatar component={Paper} style={{backgroundColor: flowerHues[value.flowerColor], color: \"white\"}}elevation={1} variant=\"rounded\">\r\n                         <LocalFlorist />\r\n                       </Avatar>\r\n                      </Wrapper>\r\n\r\n                 </Grid>\r\n               )})}\r\n             </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    )\r\n  };\r\n\r\n  export default Inventory;\r\n","import './styles/App.css';\r\nimport times from 'lodash/times';\r\nimport PlotRow from './components/PlotGrid/PlotRow';\r\nimport Inventory from './components/Inventory';\r\n\r\nimport { useState } from 'react';\r\nimport { rollUpTo, generateFlower, generateDeadPlot } from './utils/dice';\r\nimport {flowerColors, flowerColorsAccessible } from './constants/colors';\r\nimport { gameConfig } from './config/gameConfig';\r\nimport { WiDaySunny, WiSunrise, WiNightAltPartlyCloudy } from \"weather-icons-react\";\r\nimport Fab from '@material-ui/core/Fab';\r\n\r\nimport {\r\n  createMuiTheme,\r\n  ThemeProvider,\r\n} from '@material-ui/core/styles';\r\nimport UpdateIcon from '@material-ui/icons/Update';\r\n\r\n\r\nlet flowerHues = gameConfig.accessibilityMode ? flowerColorsAccessible : flowerColors;\r\n\r\n//returns a 2D array \"plot\" objects: {id, isFlower, color, name, content, row, column}\r\nconst generatePlots = (size) => {\r\n  let plots = [];\r\n  let plots2D = [];\r\n\r\n  times(size, id => {\r\n      let dice = rollUpTo(100); // roll a 100 sided die\r\n      if (dice<=gameConfig.fertility){ // chance of rolling a flower\r\n        var ageRoll = rollUpTo(2); // select age\r\n        plots[id] = generateFlower({age: ageRoll, id: id});\r\n      } else {\r\n        plots[id] = generateDeadPlot({id: id})\r\n      }\r\n  });\r\n\r\n  //We splice it into rows, and make a 2D array of those.\r\n  while(plots.length) plots2D.push(plots.splice(0, gameConfig.rowSize));\r\n\r\n  // load up the plots with coordinate information.\r\n  // This will be used to determine neighbors later.\r\n  times(plots2D.length, r => {\r\n    times(plots2D[r].length, c => {\r\n      plots2D[r][c].row = r;\r\n      plots2D[r][c].col = c;\r\n    });\r\n  });\r\n\r\n  return plots2D;\r\n}\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: \"#185653\"\r\n    },\r\n  },\r\n});\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n  const rowSize = gameConfig.rowSize;\r\n  const title = gameConfig.title;\r\n\r\n  const [plotGrid, setPlotGrid] = useState(generatePlots(rowSize*(rowSize-1)));\r\n  const [trueTime, setTrueTime] = useState(0);\r\n  const [inventory, setInventory] = useState([]);\r\n\r\n  // Days are divided into 3 sections. \"trueTime\" will always reflect exactly\r\n  // how many time units have passed; displayTime shows what day we are on.\r\n  const displayTime = 1+Math.floor(trueTime/3);\r\n\r\n  const findNeighbors = (x , y) => {\r\n    //TODO: This is broken. There's a different formula for even and odd rows.\r\n    /*\r\n    neighbors will depend on whether y is even or odd\r\n    clockwise:\r\n    up: x-1, y\r\n    upright: x-1, y+1\r\n    downright: x, y+1\r\n    down: x+1, y\r\n    downleft: x+1, y-1\r\n    upleft: x-1, y-1\r\n\r\n    if x>0, get up\r\n    if x>0 && y<gameConfig.rowSize, get upright\r\n    if y<gameConfig.rowSize, get downRight\r\n    if x<gameConfig.rowSize-1, get down\r\n    if x<gameConfig.rowSize-1 && y>0, get downleft\r\n    if x>0 and y>0, get upleft\r\n    */\r\n\r\n    let neighbors = [];\r\n    if (x > 0)  neighbors.push({row: x-1, col: y});\r\n    if (y < gameConfig.rowSize-1) neighbors.push({row: x, col: y+1});\r\n    if (y < gameConfig.rowSize-1) neighbors.push({row: x, col: y+1});\r\n    if (x < gameConfig.rowSize-2) neighbors.push({row: x+1, col: y});\r\n    if (x < gameConfig.rowSize-2 && y > 0 ) neighbors.push({row: x+1, col: y-1});\r\n    if (x > 0 && y > 0) neighbors.push({row: x-1, col: y});\r\n\r\n    return neighbors;\r\n  }\r\n\r\n  const findEmptyNeighbors = (x , y) =>{\r\n    let neighbors = findNeighbors(x, y);\r\n    let empties = [];\r\n    times(neighbors.length, (i) => {\r\n      if (!plotGrid[neighbors[i].row][neighbors[i].col].isFlower){\r\n        empties.push(plotGrid[neighbors[i].row][neighbors[i].col]);\r\n      }\r\n    });\r\n    return empties;\r\n  }\r\n\r\n  const plantFlower = (x, y) => {\r\n      let id = plotGrid[x][y].id;\r\n      plotGrid[x][y] = generateFlower({x, y, id});\r\n      setPlotGrid([...plotGrid]);\r\n    }\r\n\r\n    const killFlower = (x, y) => {\r\n      let id = plotGrid[x][y].id;\r\n      plotGrid[x][y] = generateDeadPlot({x, y, id})\r\n      setPlotGrid([...plotGrid]);\r\n    }\r\n\r\n  const step = () => {\r\n    // first we increment time\r\n    setTrueTime(trueTime + 1);\r\n\r\n    //unmark everyone\r\n    times(plotGrid.length, row => {\r\n      times(plotGrid[row].length, col=> {\r\n        plotGrid[row][col].marked = false;\r\n      });\r\n    });\r\n\r\n    //We don't want to kill anyone till the end, but we also don't want\r\n    // to loop through the grid more than once, so we'll keep a\r\n    // death list that we'll revisit once everyone gets a chance to breed.\r\n\r\n    let deathList = [];\r\n\r\n    //then we let our healthy adults breed\r\n    times(plotGrid.length, row => {\r\n      times(plotGrid[row].length, col=> {\r\n        if (!plotGrid[row][col].marked){\r\n          plotGrid[row][col].marked = true;\r\n\r\n\r\n          //only age buds at the right time of day.\r\n          if (plotGrid[row][col].age < 2 && (trueTime % 3 === 2 || trueTime % 3 === 0)) {\r\n            plotGrid[row][col].age ++;\r\n          };\r\n\r\n          if (plotGrid[row][col].isFlower && plotGrid[row][col].age===2){\r\n            let empties = findEmptyNeighbors(row, col);\r\n            if (empties.length){\r\n              let pick = empties[rollUpTo(empties.length)];\r\n              if (pick) plantFlower(pick.row, pick.col);\r\n            } else {\r\n              //Overpopulation - roll to mark flower for death\r\n              let roll = rollUpTo(3);\r\n              if (!roll) deathList.push({row, col});\r\n            }\r\n          }\r\n        }\r\n\r\n      });\r\n    });\r\n\r\n    //Everybody who is going to breed has now bred.\r\n    times(deathList.length, i => {\r\n      killFlower(deathList[i].row, deathList[i].col);\r\n    });\r\n\r\n\r\n\r\n  }\r\n\r\n  let timeOfDay = \"\";\r\n\r\n  // TODO: this is hideous. Make a component for this weather icon.\r\n  if ( trueTime % 3 === 0) { timeOfDay = <WiSunrise size={40} style={{backgroundColor: '#d47986', padding: '3 2 0 2', borderRadius: '10px', border: '2px solid white'}}/>; }\r\n  else if ( trueTime % 3 === 1 ) { timeOfDay = <WiDaySunny size={40} style={{backgroundColor: '#dbbd72', padding: '3 2 0 2', borderRadius: '10px', border: '2px solid white'}}/>; }\r\n  else if ( trueTime % 3 === 2 ) { timeOfDay = <WiNightAltPartlyCloudy size={40} style={{backgroundColor: '#739cde', padding: '3 2 0 2', borderRadius: '10px', border: '2px solid white'}}/>; }\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n      {title}\r\n       <Fab variant=\"extended\" color=\"primary\" onClick={() =>{\r\n           step();\r\n         }} style={{\r\n           margin: \"1em\"\r\n         }}>\r\n         <UpdateIcon />\r\n       </Fab>\r\n       <p>{timeOfDay}</p>\r\n       <p> {'Day '+displayTime} </p>\r\n      <Inventory flowerHues={flowerHues} items={inventory} setItems={setInventory}/>\r\n\r\n     {/*\r\n     I get that it would probably be a good idea to\r\n     have another component called PlotGrid or something\r\n     but really all it would do is wrap this set of PlotRows\r\n     in a div with this className. and that just isn't enough\r\n     stuff to justify a whole file or even its own variable\r\n     I think\r\n     */}\r\n      <div className=\"honeycomb\" style={{paddingTop: \"2em\"}}>\r\n        {plotGrid.map((plotRow, i) => {\r\n          return <PlotRow\r\n            plots={plotRow}\r\n            gridState={plotGrid} gridStateSetter={setPlotGrid}\r\n            inventoryState={inventory} inventoryStateSetter={setInventory}\r\n/>\r\n        })}\r\n      </div>\r\n      </header>\r\n    </div>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport './styles/hexagon.css';\r\nimport App from './App';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport {Helmet} from \"react-helmet\";\r\n\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n    <>\r\n    <Helmet>\r\n      <title>{'Tiny Collector'}</title>\r\n    </Helmet>\r\n    <App />\r\n    </>,\r\n  // </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}